---
- name: Find VMs with ISO files mounted to CD drives
  hosts: all
  gather_facts: false
  connection: local
  
  vars:
    # AAP credential variables - these will be injected by AAP
    vcenter_username: "{{ ansible_user }}"
    vcenter_password: "{{ ansible_password }}"
    # Disconnect variable - set to true to automatically disconnect all connected CD devices
    disconnect: true
    
  tasks:
    - name: Gather information about all VMs on ESXi host
      community.vmware.vmware_vm_info:
        hostname: "{{ inventory_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: false
        vm_type: vm
        show_attribute: true
      register: vm_info
      delegate_to: localhost

    - name: Get VM hardware details for each VM
      community.vmware.vmware_guest_info:
        hostname: "{{ inventory_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: false
        uuid: "{{ item.uuid }}"
        schema: "vsphere"
        properties:
          - "config.hardware.device"
      register: vm_hardware_details
      loop: "{{ vm_info.virtual_machines }}"
      delegate_to: localhost

    - name: Display VM hardware structure for debugging
      debug:
        msg: "VM: {{ vm_info.virtual_machines[0].guest_name }}, Hardware keys: {{ vm_hardware_details.results[0].instance.keys() | list }}"
      when: 
        - vm_info.virtual_machines | length > 0
        - vm_hardware_details.results | length > 0
        - vm_hardware_details.results[0].instance is defined

    - name: Initialize list for VMs with CD media
      set_fact:
        vms_with_cd_media: []

    - name: Check each VM for connected CD devices
      set_fact:
        vms_with_cd_media: "{{ vms_with_cd_media + [vm_cd_result] }}"
      vars:
        vm_basic_info: "{{ vm_info.virtual_machines[item] }}"
        vm_hardware_info: "{{ vm_hardware_details.results[item].instance }}"
        vm_cd_result:
          vm_name: "{{ vm_basic_info.guest_name }}"
          power_state: "{{ vm_basic_info.power_state }}"
          uuid: "{{ vm_basic_info.uuid }}"
          esxi_host: "{{ inventory_hostname }}"
          cd_devices: "{{ found_cd_devices }}"
        found_cd_devices: >-
          {%- set cd_list = [] -%}
          {%- if vm_hardware_info.config is defined and vm_hardware_info.config.hardware is defined -%}
            {%- for device in vm_hardware_info.config.hardware.device -%}
              {%- if device.deviceInfo is defined and device.deviceInfo.label is defined -%}
                {%- if 'CD/DVD' in device.deviceInfo.label or 'cdrom' in device.deviceInfo.label -%}
                  {%- if device.connectable is defined and device.connectable.connected == true -%}
                    {%- set cd_info = {} -%}
                    {%- set _ = cd_info.update({'device_label': device.deviceInfo.label}) -%}
                    {%- set _ = cd_info.update({'device_key': device.key | default('N/A')}) -%}
                    {%- set _ = cd_info.update({'connected': device.connectable.connected}) -%}
                    {%- if device.backing is defined -%}
                      {%- if device.backing.fileName is defined -%}
                        {%- set _ = cd_info.update({'media_type': 'ISO File'}) -%}
                        {%- set _ = cd_info.update({'media_path': device.backing.fileName}) -%}
                      {%- elif device.backing.deviceName is defined -%}
                        {%- set _ = cd_info.update({'media_type': 'Physical Drive'}) -%}
                        {%- set _ = cd_info.update({'media_path': device.backing.deviceName}) -%}
                      {%- else -%}
                        {%- set _ = cd_info.update({'media_type': 'Connected (no media details)'}) -%}
                        {%- set _ = cd_info.update({'media_path': 'N/A'}) -%}
                      {%- endif -%}
                    {%- else -%}
                      {%- set _ = cd_info.update({'media_type': 'Connected (no backing info)'}) -%}
                      {%- set _ = cd_info.update({'media_path': 'N/A'}) -%}
                    {%- endif -%}
                    {%- set _ = cd_list.append(cd_info) -%}
                  {%- endif -%}
                {%- endif -%}
              {%- endif -%}
            {%- endfor -%}
          {%- endif -%}
          {{ cd_list }}
      loop: "{{ range(0, vm_info.virtual_machines|length) | list }}"
      when: 
        - vm_hardware_details.results[item].instance is defined
        - found_cd_devices | length > 0

    - name: Display VMs with connected CD devices
      debug:
        msg: |
          ===================================================
          VM WITH CD MEDIA FOUND:
          ===================================================
          VM Name: {{ item.vm_name }}
          Power State: {{ item.power_state }}
          UUID: {{ item.uuid }}
          
          Connected CD/DVD Devices:
          {% for cd in item.cd_devices %}
          - Device: {{ cd.device_label }}
            Media Type: {{ cd.media_type }}
            Media Path: {{ cd.media_path }}
            Connected: {{ cd.connected }}
            Device Key: {{ cd.device_key }}
          {% endfor %}
          ===================================================
      loop: "{{ vms_with_cd_media }}"
      when: vms_with_cd_media | length > 0

    - name: Disconnect CD devices if requested (VMs remain powered on)
      community.vmware.vmware_guest:
        hostname: "{{ inventory_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: false
        uuid: "{{ item.0.uuid }}"
        cdrom:
          - controller_number: "{{ cd_controller_num }}"
            unit_number: "{{ cd_unit_num }}"
            state: present
            type: none
      vars:
        # Simplified controller mapping - only handle what we can reliably disconnect
        # IDE controllers (3000-3003): Hot-removable
        cd_controller_num: "{{ 0 if (item.1.device_key | int) < 3002 else 1 }}"
        cd_unit_num: "{{ (item.1.device_key | int) % 2 }}"
      with_subelements:
        - "{{ vms_with_cd_media }}"
        - cd_devices
      loop_control:
        label: "{{ item.0.vm_name }} - {{ item.1.device_label }} (Key:{{ item.1.device_key }}) - Controller:{{ cd_controller_num }} Unit:{{ cd_unit_num }}"
      delegate_to: localhost
      when: 
        - disconnect | bool
        - vms_with_cd_media | length > 0
        - item.1.device_key != 'N/A'
        - item.1.device_key | int >= 3000
        - item.1.device_key | int < 15000  # Only IDE controllers - hot-removable
      register: disconnect_results
      failed_when: false

    - name: Report SATA controller devices that cannot be hot-disconnected
      debug:
        msg: |
          ===================================================
          SATA CONTROLLER CD DEVICE (Manual intervention required):
          ===================================================
          VM: {{ item.0.vm_name }}
          Device: {{ item.1.device_label }}
          Device Key: {{ item.1.device_key }}
          Media: {{ item.1.media_path }}
          
          This device is on a SATA controller and cannot be hot-removed while
          the VM is powered on. To disconnect:
          1. Use vSphere Client
          2. Edit VM settings
          3. Remove the CD/DVD drive manually
          ===================================================
      with_subelements:
        - "{{ vms_with_cd_media }}"
        - cd_devices
      loop_control:
        label: "{{ item.0.vm_name }} - {{ item.1.device_label }} (SATA - Manual Required)"
      when:
        - disconnect | bool
        - vms_with_cd_media | length > 0
        - item.1.device_key | int >= 15000  # SATA controllers

    - name: Display disconnect results
      debug:
        msg: |
          ===================================================
          CD DISCONNECT RESULTS:
          ===================================================
          {% if disconnect | bool and vms_with_cd_media | length > 0 %}
          Disconnect operations completed (ALL VMs REMAINED POWERED ON):
          - IDE Controller disconnects attempted: {{ disconnect_results.results | default([]) | length }}
          - Successful IDE disconnects: {{ disconnect_results.results | default([]) | selectattr('changed', 'equalto', true) | list | length }}
          - SATA devices requiring manual intervention: {{ vms_with_cd_media | selectattr('cd_devices', 'defined') | map(attribute='cd_devices') | flatten | selectattr('device_key', 'defined') | selectattr('device_key', 'ge', 15000) | list | length }}
          
          No VMs were powered off during this operation.
          {% elif not disconnect | bool %}
          Disconnect is set to false - no CD devices were disconnected.
          {% else %}
          No VMs with connected CD devices found to disconnect.
          {% endif %}
          ===================================================
      when: disconnect | bool or vms_with_cd_media | length > 0

    - name: Display final summary results
      debug:
        msg: |
          ===================================================
          FINAL SUMMARY for {{ inventory_hostname }}:
          ===================================================
          Total VMs scanned: {{ vm_info.virtual_machines | length }}
          VMs with connected CD devices: {{ vms_with_cd_media | length }}
          Disconnect variable: {{ disconnect }}
          ALL VMs REMAINED POWERED ON THROUGHOUT OPERATION
          ===================================================
          {% if vms_with_cd_media | length == 0 %}
          No VMs found with connected CD/DVD devices.
          {% endif %}