---
- name: Find and optionally disconnect VMs with ISO files mounted to CD drives
  hosts: all
  gather_facts: false
  connection: local
  
  vars:
    # AAP credential variables - these will be injected by AAP
    vcenter_username: "{{ ansible_user }}"
    vcenter_password: "{{ ansible_password }}"
    
    # Control variables
    disconnect: true
    dry_run: false  # Set to true to see what would be disconnected without making changes
    
    # VM blacklist - VMs to exclude from disconnect operations (case-sensitive)
    vm_blacklist: []
    # Example: vm_blacklist: ["critical-vm-01", "production-db", "backup-server"]
    
    # Internal variables
    failed_vms: []
    processed_vms: []
    
  tasks:
    - name: Validate required variables
      assert:
        that:
          - vcenter_username is defined and vcenter_username | length > 0
          - vcenter_password is defined and vcenter_password | length > 0
          - inventory_hostname is defined
        fail_msg: "Missing required connection credentials or hostname"
        quiet: true

    - name: Display operation mode
      debug:
        msg: |
          ===================================================
          OPERATION MODE:
          ===================================================
          Target ESXi Host: {{ inventory_hostname }}
          Disconnect Mode: {{ disconnect }}
          Dry Run Mode: {{ dry_run }}
          VM Blacklist: {{ vm_blacklist | length }} VMs excluded
          ===================================================

    - name: Test connection to ESXi host
      community.vmware.vmware_vm_info:
        hostname: "{{ inventory_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: false
        vm_type: vm
        show_attribute: false
      register: connection_test
      delegate_to: localhost
      failed_when: false
      changed_when: false

    - name: Validate ESXi connection
      assert:
        that:
          - connection_test is not failed
          - connection_test.virtual_machines is defined
        fail_msg: "Failed to connect to ESXi host {{ inventory_hostname }}: {{ connection_test.msg | default('Unknown error') }}"

    - name: Gather VM information from ESXi host
      community.vmware.vmware_vm_info:
        hostname: "{{ inventory_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: false
        vm_type: vm
        show_attribute: true
      register: vm_info
      delegate_to: localhost
      retries: 3
      delay: 5
      until: vm_info is not failed

    - name: Initialize tracking variables
      set_fact:
        vms_with_cd_media: []
        failed_vm_queries: []
        total_vms_found: "{{ vm_info.virtual_machines | length }}"

    - name: Display VM discovery summary
      debug:
        msg: "Found {{ total_vms_found }} VMs on {{ inventory_hostname }}"

    - name: Get hardware details for each VM
      block:
        - name: Query VM hardware information
          community.vmware.vmware_guest_info:
            hostname: "{{ inventory_hostname }}"
            username: "{{ vcenter_username }}"
            password: "{{ vcenter_password }}"
            validate_certs: false
            uuid: "{{ item.uuid }}"
            schema: "vsphere"
            properties:
              - "config.hardware.device"
          register: vm_hardware_query
          loop: "{{ vm_info.virtual_machines }}"
          loop_control:
            label: "{{ item.guest_name | default('Unknown') }}"
          delegate_to: localhost
          failed_when: false
          retries: 2
          delay: 2

        - name: Debug raw hardware query results
          debug:
            msg: |
              Raw hardware query results:
              - Query successful: {{ vm_hardware_query is not failed }}
              - Number of results: {{ vm_hardware_query.results | length }}
              - Sample result keys: {{ vm_hardware_query.results[0].keys() | list if vm_hardware_query.results | length > 0 else 'No results' }}
              - Sample VM name: {{ vm_info.virtual_machines[0].guest_name if vm_info.virtual_machines | length > 0 else 'No VMs' }}

        - name: Pre-loop debugging
          debug:
            msg: |
              About to process VM hardware results:
              - vm_hardware_query defined: {{ vm_hardware_query is defined }}
              - vm_hardware_query.results defined: {{ vm_hardware_query.results is defined if vm_hardware_query is defined else 'N/A' }}
              - Results count: {{ vm_hardware_query.results | length if vm_hardware_query.results is defined else 'N/A' }}
              - Will process: {{ vm_hardware_query.results | length > 0 if vm_hardware_query.results is defined else 'N/A' }}

        - name: Debug hardware query results
          debug:
            msg: |
              VM {{ ansible_loop.index0 }}: {{ vm_info.virtual_machines[ansible_loop.index0].guest_name }}
              Query failed: {{ item.failed is defined and item.failed }}
              Has instance: {{ item.instance is defined }}
              Instance keys: {{ item.instance.keys() | list if item.instance is defined else 'N/A' }}
          loop: "{{ vm_hardware_query.results }}"
          loop_control:
            extended: true
          when: ansible_loop.index0 < 3  # Only show first 3 VMs

        - name: Process VM hardware results
          block:
            - name: Debug VM hardware structure
              debug:
                msg: |
                  VM: {{ vm_info.virtual_machines[ansible_loop.index0].guest_name }}
                  Query failed: {{ item.failed is defined and item.failed }}
                  Has instance: {{ item.instance is defined }}
                  Has config: {{ item.instance.config is defined if item.instance is defined else 'N/A' }}
                  Has hardware: {{ item.instance.config.hardware is defined if (item.instance is defined and item.instance.config is defined) else 'N/A' }}
                  Device count: {{ item.instance.config.hardware.device | length if (item.instance is defined and item.instance.config is defined and item.instance.config.hardware is defined) else 'N/A' }}
                  Condition check: {{ (item.failed is not defined or not item.failed) and item.instance is defined and item.instance.config is defined and item.instance.config.hardware is defined }}
              when: ansible_loop.index0 < 3  # Only show first 3 VMs

            - name: Initialize CD devices list for current VM
              set_fact:
                current_vm_cd_devices: []

            - name: Debug device types for first VM (unconditional)
              debug:
                msg: |
                  Device {{ device_index }}: 
                  - Label: {{ device.deviceInfo.label | default('No label') }}
                  - Key: {{ device.key | default('No key') }}
                  - Type: {{ device | type_debug }}
                  - Has deviceInfo: {{ device.deviceInfo is defined }}
                  - Has connectable: {{ device.connectable is defined }}
                  - Connected: {{ device.connectable.connected if device.connectable is defined else 'N/A' }}
              loop: "{{ item.instance.config.hardware.device | default([]) }}"
              loop_control:
                loop_var: device
                index_var: device_index
              when: 
                - ansible_loop.index0 == 0  # Only debug first VM
                - device_index < 10  # Show first 10 devices
                - item.instance is defined
                - item.instance.config is defined
                - item.instance.config.hardware is defined

            - name: Process each device to find CD/DVD devices
              set_fact:
                current_vm_cd_devices: "{{ current_vm_cd_devices + [cd_device_info] }}"
              vars:
                device_key_int: "{{ device.key | default(0) | int }}"
                is_cd_device: >-
                  {{
                    device.deviceInfo is defined and
                    device.deviceInfo.label is defined and
                    (
                      'CD/DVD' in device.deviceInfo.label or
                      'CD' in device.deviceInfo.label or
                      'DVD' in device.deviceInfo.label or
                      'cdrom' in device.deviceInfo.label.lower()
                    )
                  }}
                is_connected: >-
                  {{
                    device.connectable is defined and
                    device.connectable.connected is defined and
                    device.connectable.connected == true
                  }}
                cd_device_info:
                  device_label: "{{ device.deviceInfo.label }}"
                  device_key: "{{ device.key | default('N/A') }}"
                  connected: "{{ device.connectable.connected }}"
                  controller_type: "{{ 'IDE' if device_key_int < 15000 else 'SATA' }}"
                  hot_removable: "{{ device_key_int < 15000 }}"
                  controller_number: >-
                    {{
                      0 if device_key_int < 3002
                      else 1 if device_key_int < 15000
                      else ((device_key_int - 15000) // 30)
                    }}
                  unit_number: >-
                    {{
                      device_key_int % 2 if device_key_int < 15000
                      else ((device_key_int - 15000) % 30)
                    }}
                  media_type: >-
                    {{
                      'ISO File' if (device.backing is defined and device.backing.fileName is defined)
                      else 'Physical Drive' if (device.backing is defined and device.backing.deviceName is defined)
                      else 'Connected (no media details)'
                    }}
                  media_path: >-
                    {{
                      device.backing.fileName | default(
                        device.backing.deviceName | default('N/A')
                      ) if device.backing is defined
                      else 'N/A'
                    }}
              loop: "{{ item.instance.config.hardware.device | default([]) }}"
              loop_control:
                loop_var: device
                label: "{{ device.deviceInfo.label | default('Unknown Device') }}"
              when: 
                - is_cd_device | bool
                - is_connected | bool

            - name: Debug CD device detection for first VM
              debug:
                msg: |
                  Checking device: {{ device.deviceInfo.label | default('No label') }}
                  Is CD device: {{ is_cd_device }}
                  Is connected: {{ is_connected }}
                  Device key: {{ device.key | default('N/A') }}
                  Has backing: {{ device.backing is defined }}
                  Backing type: {{ device.backing | type_debug if device.backing is defined else 'N/A' }}
              vars:
                is_cd_device: >-
                  {{
                    device.deviceInfo is defined and
                    device.deviceInfo.label is defined and
                    (
                      'CD/DVD' in device.deviceInfo.label or
                      'CD' in device.deviceInfo.label or
                      'DVD' in device.deviceInfo.label or
                      'cdrom' in device.deviceInfo.label.lower()
                    )
                  }}
                is_connected: >-
                  {{
                    device.connectable is defined and
                    device.connectable.connected is defined and
                    device.connectable.connected == true
                  }}
              loop: "{{ item.instance.config.hardware.device | default([]) }}"
              loop_control:
                loop_var: device
              when: 
                - ansible_loop.index0 == 0  # Only debug first VM
                - is_cd_device | bool  # Only show potential CD devices

            - name: Add VM to results if it has connected CD devices
              set_fact:
                vms_with_cd_media: >-
                  {{
                    vms_with_cd_media + [{
                      'vm_name': vm_info.virtual_machines[ansible_loop.index0].guest_name,
                      'power_state': vm_info.virtual_machines[ansible_loop.index0].power_state,
                      'uuid': vm_info.virtual_machines[ansible_loop.index0].uuid,
                      'esxi_host': inventory_hostname,
                      'cd_devices': current_vm_cd_devices
                    }]
                  }}
              when: current_vm_cd_devices | length > 0

          when: 
            - item.failed is not defined or not item.failed
            - item.instance is defined
            - item.instance.config is defined
            - item.instance.config.hardware is defined

        - name: Record failed VM query
          set_fact:
            failed_vm_queries: >-
              {{
                failed_vm_queries + [{
                  'vm_name': vm_info.virtual_machines[ansible_loop.index0].guest_name | default('Unknown'),
                  'uuid': vm_info.virtual_machines[ansible_loop.index0].uuid,
                  'error': item.msg | default('Hardware query failed')
                }]
              }}
          when: item.failed is defined and item.failed

    - name: Display VMs with connected CD devices
      debug:
        msg: |
          ===================================================
          VM WITH CD MEDIA FOUND:
          ===================================================
          VM Name: {{ item.vm_name }}
          Power State: {{ item.power_state }}
          Blacklisted: {{ item.vm_name in vm_blacklist }}
          
          Connected CD/DVD Devices:
          {% for cd in item.cd_devices %}
          - Device: {{ cd.device_label }}
            Controller Type: {{ cd.controller_type }}
            Media Type: {{ cd.media_type }}
            Media Path: {{ cd.media_path }}
            Device Key: {{ cd.device_key }}
            Hot-Removable: {{ cd.hot_removable }}
          {% endfor %}
          ===================================================
      loop: "{{ vms_with_cd_media }}"
      when: vms_with_cd_media | length > 0

    - name: Perform CD device disconnections
      block:
        - name: Filter VMs for disconnect operations
          set_fact:
            vms_eligible_for_disconnect: >-
              {{
                vms_with_cd_media |
                rejectattr('vm_name', 'in', vm_blacklist) |
                selectattr('cd_devices', 'defined') |
                list
              }}

        - name: Display dry-run information
          debug:
            msg: |
              ===================================================
              DRY RUN MODE - NO CHANGES WILL BE MADE
              ===================================================
              VMs that would be processed: {{ vms_eligible_for_disconnect | length }}
              Hot-removable devices that would be disconnected: {{ hot_removable_count }}
              Devices requiring manual intervention: {{ manual_intervention_count }}
              ===================================================
          vars:
            all_cd_devices: >-
              {{
                vms_eligible_for_disconnect |
                map(attribute='cd_devices') |
                flatten
              }}
            hot_removable_count: >-
              {{
                all_cd_devices |
                selectattr('hot_removable', 'equalto', true) |
                list | length
              }}
            manual_intervention_count: >-
              {{
                all_cd_devices |
                selectattr('hot_removable', 'equalto', false) |
                list | length
              }}
          when: dry_run | bool

        - name: Disconnect hot-removable CD devices
          community.vmware.vmware_guest:
            hostname: "{{ inventory_hostname }}"
            username: "{{ vcenter_username }}"
            password: "{{ vcenter_password }}"
            validate_certs: false
            uuid: "{{ item.0.uuid }}"
            cdrom:
              - controller_number: "{{ item.1.controller_number }}"
                unit_number: "{{ item.1.unit_number }}"
                state: present
                type: none
          with_subelements:
            - "{{ vms_eligible_for_disconnect }}"
            - cd_devices
          loop_control:
            label: "{{ item.0.vm_name }} - {{ item.1.device_label }}"
          delegate_to: localhost
          when: 
            - not (dry_run | bool)
            - item.1.hot_removable | bool
          register: disconnect_results
          failed_when: false
          retries: 2
          delay: 3

        - name: Report devices requiring manual intervention
          debug:
            msg: |
              ===================================================
              MANUAL INTERVENTION REQUIRED:
              ===================================================
              VM: {{ item.0.vm_name }}
              Device: {{ item.1.device_label }}
              Controller: {{ item.1.controller_type }}
              Media: {{ item.1.media_path }}
              
              This device cannot be hot-removed. Use vSphere Client to:
              1. Edit VM settings
              2. Remove the CD/DVD drive manually
              ===================================================
          with_subelements:
            - "{{ vms_eligible_for_disconnect }}"
            - cd_devices
          loop_control:
            label: "{{ item.0.vm_name }} - {{ item.1.device_label }}"
          when: not (item.1.hot_removable | bool)

      when: 
        - disconnect | bool
        - vms_with_cd_media | length > 0

    - name: Display operation summary
      debug:
        msg: |
          ===================================================
          OPERATION SUMMARY for {{ inventory_hostname }}:
          ===================================================
          Mode: {{ 'DRY RUN' if dry_run else 'LIVE' }}
          Total VMs scanned: {{ total_vms_found }}
          VMs with connected CD devices: {{ vms_with_cd_media | length }}
          VMs in blacklist: {{ (vms_with_cd_media | selectattr('vm_name', 'in', vm_blacklist) | list) | length }}
          Failed VM queries: {{ failed_vm_queries | length }}
          Disconnect operations: {{ 'Enabled' if disconnect else 'Disabled' }}
          {% if not dry_run and disconnect and vms_with_cd_media | length > 0 %}
          Successful disconnects: {{ (disconnect_results.results | default([]) | selectattr('changed', 'equalto', true) | list) | length }}
          {% endif %}
          ===================================================

    - name: Report any failed operations
      debug:
        msg: |
          ===================================================
          FAILED OPERATIONS:
          ===================================================
          {% for failure in failed_vm_queries %}
          VM: {{ failure.vm_name }}
          Error: {{ failure.error }}
          {% endfor %}
          ===================================================
      when: failed_vm_queries | length > 0

