---
- name: Find and optionally disconnect VMs with ISO files mounted to CD drives
  hosts: all
  gather_facts: false
  connection: local
  
  vars:
    # AAP credential variables - these will be injected by AAP
    vcenter_username: "{{ ansible_user }}"
    vcenter_password: "{{ ansible_password }}"
    
    # Control variables
    disconnect: true
    dry_run: false  # Set to true to see what would be disconnected without making changes
    
    # VM blacklist - VMs to exclude from disconnect operations (case-sensitive)
    vm_blacklist: []
    # Example: vm_blacklist: ["critical-vm-01", "production-db", "backup-server"]
    
    # Internal variables
    failed_vms: []
    processed_vms: []
    
  tasks:
    - name: Validate required variables
      ansible.builtin.assert:
        that:
          - vcenter_username is defined and vcenter_username | length > 0
          - vcenter_password is defined and vcenter_password | length > 0
          - inventory_hostname is defined
        fail_msg: "Missing required connection credentials or hostname"
        quiet: true

    - name: Display operation mode
      ansible.builtin.debug:
        msg: |
          ===================================================
          OPERATION MODE:
          ===================================================
          Target ESXi Host: {{ inventory_hostname }}
          Disconnect Mode: {{ disconnect }}
          Dry Run Mode: {{ dry_run }}
          VM Blacklist: {{ vm_blacklist | length }} VMs excluded
          ===================================================

    - name: Test connection to ESXi host
      community.vmware.vmware_vm_info:
        hostname: "{{ inventory_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: false
        vm_type: vm
        show_attribute: false
      register: connection_test
      delegate_to: localhost
      failed_when: false
      changed_when: false

    - name: Validate ESXi connection
      ansible.builtin.assert:
        that:
          - connection_test is not failed
          - connection_test.virtual_machines is defined
        fail_msg: "Failed to connect to ESXi host {{ inventory_hostname }}: {{ connection_test.msg | default('Unknown error') }}"

    - name: Gather VM information from ESXi host
      community.vmware.vmware_vm_info:
        hostname: "{{ inventory_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: false
        vm_type: vm
        show_attribute: true
      register: vm_info
      delegate_to: localhost
      retries: 3
      delay: 5
      until: vm_info is not failed

    - name: Initialize tracking variables
      ansible.builtin.set_fact:
        vms_with_cd_media: []
        failed_vm_queries: []
        total_vms_found: "{{ vm_info.virtual_machines | length }}"

    - name: Display VM discovery summary
      ansible.builtin.debug:
        msg: "Found {{ total_vms_found }} VMs on {{ inventory_hostname }}"

    - name: Get hardware details for each VM
      community.vmware.vmware_guest_info:
        hostname: "{{ inventory_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: false
        uuid: "{{ item.uuid }}"
        schema: "vsphere"
        properties:
          - "config.hardware.device"
      register: vm_hardware_query
      loop: "{{ vm_info.virtual_machines }}"
      loop_control:
        label: "{{ item.guest_name | default('Unknown') }}"
      delegate_to: localhost
      failed_when: false
      retries: 2
      delay: 2

    - name: Debug hardware query results summary
      ansible.builtin.debug:
        msg: |
          Hardware query completed:
          - Total VMs queried: {{ vm_hardware_query.results | length }}
          - Successful queries: {{ vm_hardware_query.results | selectattr('failed', 'undefined') | list | length }}
          - Failed queries: {{ vm_hardware_query.results | selectattr('failed', 'defined') | selectattr('failed', 'equalto', true) | list | length }}

    - name: Process each VM to find CD devices with media
      ansible.builtin.set_fact:
        vms_with_cd_media: "{{ vms_with_cd_media + [vm_with_cd] }}"
      vars:
        vm_basic: "{{ vm_info.virtual_machines[ansible_loop.index0] }}"
        vm_hardware: "{{ item }}"
        current_vm_cd_devices: "{{ vm_cd_devices }}"
        vm_cd_devices: >-
          {{
            vm_hardware.instance.config.hardware.device | default([]) |
            selectattr('deviceInfo', 'defined') |
            selectattr('deviceInfo.label', 'defined') |
            select('test', device_filter_regex, 'deviceInfo.label') |
            selectattr('connectable', 'defined') |
            selectattr('connectable.connected', 'defined') |
            selectattr('connectable.connected', 'equalto', true) |
            map('extract_cd_device_info') |
            list
          }}
        device_filter_regex: '(?i)(CD/DVD|CD|DVD|cdrom)'
        vm_with_cd:
          vm_name: "{{ vm_basic.guest_name }}"
          power_state: "{{ vm_basic.power_state }}"
          uuid: "{{ vm_basic.uuid }}"
          esxi_host: "{{ inventory_hostname }}"
          cd_devices: "{{ current_vm_cd_devices }}"
      when:
        - vm_hardware.failed is not defined or not vm_hardware.failed
        - vm_hardware.instance is defined
        - vm_hardware.instance.config is defined
        - vm_hardware.instance.config.hardware is defined
        - current_vm_cd_devices | length > 0
      loop: "{{ vm_hardware_query.results }}"
      loop_control:
        extended: true

    # Custom filter to extract CD device information
    - name: Set up custom filter for CD device processing
      ansible.builtin.set_fact:
        temp_var: "placeholder"
      vars:
        extract_cd_device_info: |
          {%- set device_key_int = device.key | default(0) | int -%}
          {{
            {
              'device_label': device.deviceInfo.label,
              'device_key': device.key | default('N/A'),
              'connected': device.connectable.connected,
              'controller_type': 'IDE' if device_key_int < 15000 else 'SATA',
              'hot_removable': device_key_int < 15000,
              'controller_number': (
                0 if device_key_int < 3002
                else 1 if device_key_int < 15000
                else ((device_key_int - 15000) // 30)
              ),
              'unit_number': (
                device_key_int % 2 if device_key_int < 15000
                else ((device_key_int - 15000) % 30)
              ),
              'media_type': (
                'ISO File' if (device.backing is defined and device.backing.fileName is defined)
                else 'Physical Drive' if (device.backing is defined and device.backing.deviceName is defined)
                else 'Connected (no media details)'
              ),
              'media_path': (
                device.backing.fileName | default(
                  device.backing.deviceName | default('N/A')
                ) if device.backing is defined
                else 'N/A'
              )
            }
          }}

    # Let me rewrite this with a simpler approach that works with Ansible 2.15
    - name: Process VM hardware results to find CD devices
      ansible.builtin.debug:
        msg: "Processing VM {{ vm_index }}: {{ vm_basic.guest_name }}"
      vars:
        vm_basic: "{{ vm_info.virtual_machines[vm_index] }}"
        vm_hardware: "{{ item }}"
      loop: "{{ vm_hardware_query.results }}"
      loop_control:
        index_var: vm_index
      when: 
        - vm_hardware.failed is not defined or not vm_hardware.failed
        - vm_hardware.instance is defined

    - name: Build list of VMs with CD devices (simplified approach)
      ansible.builtin.set_fact:
        vms_with_cd_media: []

    - name: Find CD devices for each VM
      ansible.builtin.set_fact:
        vms_with_cd_media: "{{ vms_with_cd_media + [vm_result] }}"
      vars:
        vm_basic: "{{ vm_info.virtual_machines[vm_index] }}"
        vm_hardware: "{{ item }}"
        cd_devices_found: >-
          {% set devices = [] %}
          {% if vm_hardware.instance is defined and vm_hardware.instance.config is defined and vm_hardware.instance.config.hardware is defined %}
            {% for device in vm_hardware.instance.config.hardware.device %}
              {% if device.deviceInfo is defined and device.deviceInfo.label is defined %}
                {% if 'CD/DVD' in device.deviceInfo.label or 'CD' in device.deviceInfo.label or 'DVD' in device.deviceInfo.label or 'cdrom' in device.deviceInfo.label.lower() %}
                  {% if device.connectable is defined and device.connectable.connected is defined and device.connectable.connected == true %}
                    {% set device_key_int = device.key | default(0) | int %}
                    {% set device_info = {
                      'device_label': device.deviceInfo.label,
                      'device_key': device.key | default('N/A'),
                      'connected': device.connectable.connected,
                      'controller_type': 'IDE' if device_key_int < 15000 else 'SATA',
                      'hot_removable': device_key_int < 15000,
                      'controller_number': (0 if device_key_int < 3002 else 1 if device_key_int < 15000 else ((device_key_int - 15000) // 30)),
                      'unit_number': (device_key_int % 2 if device_key_int < 15000 else ((device_key_int - 15000) % 30)),
                      'media_type': ('ISO File' if (device.backing is defined and device.backing.fileName is defined) else 'Physical Drive' if (device.backing is defined and device.backing.deviceName is defined) else 'Connected (no media details)'),
                      'media_path': (device.backing.fileName | default(device.backing.deviceName | default('N/A')) if device.backing is defined else 'N/A')
                    } %}
                    {% set _ = devices.append(device_info) %}
                  {% endif %}
                {% endif %}
              {% endif %}
            {% endfor %}
          {% endif %}
          {{ devices }}
        vm_result:
          vm_name: "{{ vm_basic.guest_name }}"
          power_state: "{{ vm_basic.power_state }}"
          uuid: "{{ vm_basic.uuid }}"
          esxi_host: "{{ inventory_hostname }}"
          cd_devices: "{{ cd_devices_found }}"
      when:
        - vm_hardware.failed is not defined or not vm_hardware.failed
        - vm_hardware.instance is defined
        - vm_hardware.instance.config is defined
        - vm_hardware.instance.config.hardware is defined
        - cd_devices_found | length > 0
      loop: "{{ vm_hardware_query.results }}"
      loop_control:
        index_var: vm_index

    - name: Record failed VM queries
      ansible.builtin.set_fact:
        failed_vm_queries: >-
          {{
            failed_vm_queries + [{
              'vm_name': vm_info.virtual_machines[vm_index].guest_name | default('Unknown'),
              'uuid': vm_info.virtual_machines[vm_index].uuid,
              'error': item.msg | default('Hardware query failed')
            }]
          }}
      when: item.failed is defined and item.failed
      loop: "{{ vm_hardware_query.results }}"
      loop_control:
        index_var: vm_index

    - name: Display VMs with connected CD devices
      ansible.builtin.debug:
        msg: |
          ===================================================
          VM WITH CD MEDIA FOUND:
          ===================================================
          VM Name: {{ item.vm_name }}
          Power State: {{ item.power_state }}
          Blacklisted: {{ item.vm_name in vm_blacklist }}
          
          Connected CD/DVD Devices:
          {% for cd in item.cd_devices %}
          - Device: {{ cd.device_label }}
            Controller Type: {{ cd.controller_type }}
            Media Type: {{ cd.media_type }}
            Media Path: {{ cd.media_path }}
            Device Key: {{ cd.device_key }}
            Hot-Removable: {{ cd.hot_removable }}
          {% endfor %}
          ===================================================
      loop: "{{ vms_with_cd_media }}"
      when: vms_with_cd_media | length > 0

    - name: Perform CD device disconnections
      block:
        - name: Filter VMs for disconnect operations
          ansible.builtin.set_fact:
            vms_eligible_for_disconnect: >-
              {{
                vms_with_cd_media |
                rejectattr('vm_name', 'in', vm_blacklist) |
                selectattr('cd_devices', 'defined') |
                list
              }}

        - name: Display dry-run information
          ansible.builtin.debug:
            msg: |
              ===================================================
              DRY RUN MODE - NO CHANGES WILL BE MADE
              ===================================================
              VMs that would be processed: {{ vms_eligible_for_disconnect | length }}
              Hot-removable devices that would be disconnected: {{ hot_removable_count }}
              Devices requiring manual intervention: {{ manual_intervention_count }}
              ===================================================
          vars:
            all_cd_devices: >-
              {{
                vms_eligible_for_disconnect |
                map(attribute='cd_devices') |
                flatten
              }}
            hot_removable_count: >-
              {{
                all_cd_devices |
                selectattr('hot_removable', 'equalto', true) |
                list | length
              }}
            manual_intervention_count: >-
              {{
                all_cd_devices |
                selectattr('hot_removable', 'equalto', false) |
                list | length
              }}
          when: dry_run | bool

        - name: Disconnect hot-removable CD devices
          community.vmware.vmware_guest:
            hostname: "{{ inventory_hostname }}"
            username: "{{ vcenter_username }}"
            password: "{{ vcenter_password }}"
            validate_certs: false
            uuid: "{{ item.0.uuid }}"
            cdrom:
              - controller_number: "{{ item.1.controller_number }}"
                unit_number: "{{ item.1.unit_number }}"
                state: present
                type: none
          with_subelements:
            - "{{ vms_eligible_for_disconnect }}"
            - cd_devices
          loop_control:
            label: "{{ item.0.vm_name }} - {{ item.1.device_label }}"
          delegate_to: localhost
          when: 
            - not (dry_run | bool)
            - item.1.hot_removable | bool
          register: disconnect_results
          failed_when: false
          retries: 2
          delay: 3

        - name: Report devices requiring manual intervention
          ansible.builtin.debug:
            msg: |
              ===================================================
              MANUAL INTERVENTION REQUIRED:
              ===================================================
              VM: {{ item.0.vm_name }}
              Device: {{ item.1.device_label }}
              Controller: {{ item.1.controller_type }}
              Media: {{ item.1.media_path }}
              
              This device cannot be hot-removed. Use vSphere Client to:
              1. Edit VM settings
              2. Remove the CD/DVD drive manually
              ===================================================
          with_subelements:
            - "{{ vms_eligible_for_disconnect }}"
            - cd_devices
          loop_control:
            label: "{{ item.0.vm_name }} - {{ item.1.device_label }}"
          when: not (item.1.hot_removable | bool)

      when: 
        - disconnect | bool
        - vms_with_cd_media | length > 0

    - name: Display operation summary
      ansible.builtin.debug:
        msg: |
          ===================================================
          OPERATION SUMMARY for {{ inventory_hostname }}:
          ===================================================
          Mode: {{ 'DRY RUN' if dry_run else 'LIVE' }}
          Total VMs scanned: {{ total_vms_found }}
          VMs with connected CD devices: {{ vms_with_cd_media | length }}
          VMs in blacklist: {{ (vms_with_cd_media | selectattr('vm_name', 'in', vm_blacklist) | list) | length }}
          Failed VM queries: {{ failed_vm_queries | length }}
          Disconnect operations: {{ 'Enabled' if disconnect else 'Disabled' }}
          {% if not dry_run and disconnect and vms_with_cd_media | length > 0 %}
          Successful disconnects: {{ (disconnect_results.results | default([]) | selectattr('changed', 'equalto', true) | list) | length }}
          {% endif %}
          ===================================================

    - name: Report any failed operations
      ansible.builtin.debug:
        msg: |
          ===================================================
          FAILED OPERATIONS:
          ===================================================
          {% for failure in failed_vm_queries %}
          VM: {{ failure.vm_name }}
          Error: {{ failure.error }}
          {% endfor %}
          ===================================================
      when: failed_vm_queries | length > 0