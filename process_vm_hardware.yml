---
# Process VM hardware to find CD devices
- name: Record failed VM query
  set_fact:
    failed_vm_queries: >-
      {{
        failed_vm_queries +
        [{
          'vm_name': vm_basic.guest_name | default('Unknown'),
          'uuid': vm_basic.uuid,
          'error': vm_hardware.msg | default('Hardware query failed')
        }]
      }}
  when: vm_hardware is failed

- name: Process VM with valid hardware data
  block:
    - name: Initialize CD devices list
      set_fact:
        processed_cd_devices: []

    - name: Process each device to find CD/DVD devices
      set_fact:
        processed_cd_devices: "{{ processed_cd_devices + [cd_device_info] }}"
      vars:
        device_key_int: "{{ device.key | default(0) | int }}"
        is_cd_device: >-
          {{
            device.deviceInfo is defined and
            device.deviceInfo.label is defined and
            (
              'CD/DVD' in device.deviceInfo.label or
              'cdrom' in device.deviceInfo.label.lower()
            )
          }}
        is_connected: >-
          {{
            device.connectable is defined and
            device.connectable.connected is defined and
            device.connectable.connected == true
          }}
        cd_device_info:
          device_label: "{{ device.deviceInfo.label }}"
          device_key: "{{ device.key | default('N/A') }}"
          connected: "{{ device.connectable.connected }}"
          controller_type: "{{ 'IDE' if device_key_int < 15000 else 'SATA' }}"
          hot_removable: "{{ device_key_int < 15000 }}"
          controller_number: >-
            {{
              0 if device_key_int < 3002
              else 1 if device_key_int < 15000
              else ((device_key_int - 15000) // 30)
            }}
          unit_number: >-
            {{
              device_key_int % 2 if device_key_int < 15000
              else ((device_key_int - 15000) % 30)
            }}
          media_type: >-
            {{
              'ISO File' if (device.backing is defined and device.backing.fileName is defined)
              else 'Physical Drive' if (device.backing is defined and device.backing.deviceName is defined)
              else 'Connected (no media details)'
            }}
          media_path: >-
            {{
              device.backing.fileName | default(
                device.backing.deviceName | default('N/A')
              ) if device.backing is defined
              else 'N/A'
            }}
      loop: "{{ vm_hardware.instance.config.hardware.device | default([]) }}"
      loop_control:
        loop_var: device
        label: "{{ device.deviceInfo.label | default('Unknown Device') }}"
      when: 
        - is_cd_device | bool
        - is_connected | bool

    - name: Add VM to results if it has connected CD devices
      set_fact:
        vms_with_cd_media: >-
          {{
            vms_with_cd_media + [{
              'vm_name': vm_basic.guest_name,
              'power_state': vm_basic.power_state,
              'uuid': vm_basic.uuid,
              'esxi_host': inventory_hostname,
              'cd_devices': processed_cd_devices
            }]
          }}
      when: processed_cd_devices | length > 0

  when: 
    - vm_hardware is not failed
    - vm_hardware.instance is defined
    - vm_hardware.instance.config is defined
    - vm_hardware.instance.config.hardware is definedfined