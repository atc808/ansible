---
# ===============================================================================
# CD/DVD DEVICE DISCONNECT MODULE
# ===============================================================================
# Purpose: Execute disconnect operations with strategy-based approach
#
# This module handles the actual removal/disconnection of CD/DVD devices based
# on VMware capabilities and limitations. It uses a two-strategy approach to
# handle different scenarios appropriately.
#
# STRATEGY OVERVIEW:
# Strategy 1 (Media Disconnect): For IDE drives on powered-on VMs
# - VMware limitation: IDE controllers don't support hot-removal
# - Solution: Disconnect media only (set type: none)
# - Result: Drive remains but media is ejected
#
# Strategy 2 (Drive Replacement): For SATA drives or powered-off VMs  
# - Full removal of CD drive with media
# - Addition of clean replacement drive without media
# - Result: Clean state ready for future media mounting
#
# ERROR HANDLING:
# - Failed operations are captured and categorized
# - Retry logic handles temporary vSphere API issues
# - Comprehensive reporting of successes and failures
# - Addition only occurs after successful removal
#
# SAFETY FEATURES:
# - VM blacklist filtering prevents accidental operations
# - Dry-run mode shows planned operations without execution
# - Force disconnect bypasses guest OS locks
# - Pause between removal and addition allows ESXi processing
# ===============================================================================

# Initialize all tracking variables for operation results
- name: Initialize disconnect variables
  ansible.builtin.set_fact:
    vms_eligible_for_disconnect: []    # VMs that pass blacklist filtering
    successful_removals: []            # Strategy 2: Successful drive removals
    failed_removals: []               # Strategy 2: Failed drive removals
    successful_additions: []          # Strategy 2: Successful clean drive additions
    failed_additions: []              # Strategy 2: Failed clean drive additions
    successful_disconnects: []        # Strategy 1: Successful media disconnects
    failed_disconnects: []            # Strategy 1: Failed media disconnects

# Apply VM blacklist filtering to protect critical systems
# Only VMs not in the blacklist will be processed for disconnect operations
- name: Filter VMs for disconnect operations
  ansible.builtin.set_fact:
    vms_eligible_for_disconnect: >-
      {{
        vms_with_cd_media |
        rejectattr('vm_name', 'in', vm_blacklist) |
        selectattr('cd_devices', 'defined') |
        list
      }}

# Dry-run information display - shows planned operations without execution
# Critical for validating operations before making actual changes
- name: Display dry-run information
  ansible.builtin.debug:
    msg: |
      ===================================================
      DRY RUN MODE - NO CHANGES WILL BE MADE
      ===================================================
      VMs that would be processed: {{ vms_eligible_for_disconnect | length }}
      Force disconnect enabled: {{ force_disconnect | default(true) }}
      
      STRATEGY: For IDE drives on powered-on VMs, disconnect media only
      
      Operation Plan:
      {% for vm in vms_eligible_for_disconnect %}
      VM: {{ vm.vm_name }} ({{ vm.power_state }})
      {% for cd in vm.cd_devices %}
      {% if cd.controller_type == 'IDE' and vm.power_state == 'poweredOn' %}
      - DISCONNECT MEDIA: {{ cd.device_label }} (Key: {{ cd.device_key }})
        Media: {{ cd.media_path }}
        Controller: {{ cd.controller_type }} {{ cd.controller_number }}, Unit {{ cd.unit_number }}
        Note: IDE drive cannot be hot-removed, will disconnect media only
      {% else %}
      - STEP 1: Remove {{ cd.device_label }} (Key: {{ cd.device_key }})
        Media: {{ cd.media_path }}
        Controller: {{ cd.controller_type }} {{ cd.controller_number }}, Unit {{ cd.unit_number }}
      - STEP 2: Add new clean {{ cd.controller_type }} CD drive without media
      {% endif %}
      {% endfor %}
      {% endfor %}
      ===================================================
  when: dry_run | bool

# =========================================================================
# STRATEGY 1: MEDIA DISCONNECT (IDE + Powered-On VMs)
# =========================================================================
# For IDE drives on powered-on VMs, VMware doesn't support hot-removal
# Solution: Disconnect media only by setting type: none

- name: Debug - Show what will be processed for removal
  ansible.builtin.debug:
    msg: |
      VM: {{ item.0.vm_name }}
      Power State: {{ item.0.power_state }}
      Device: {{ item.1.device_label }}
      Controller Type: {{ item.1.controller_type }}
      Controller Number: {{ item.1.controller_number }}
      Unit Number: {{ item.1.unit_number }}
      Will Process: {{ not (item.1.controller_type == 'IDE' and item.0.power_state == 'poweredOn') }}
  with_subelements:
    - "{{ vms_eligible_for_disconnect }}"
    - cd_devices
  when: not (dry_run | bool)

# Strategy 1: Disconnect media from IDE drives on powered-on VMs
# Uses vmware_guest module to set CD drive to "none" type
- name: Strategy 1 - Disconnect media from IDE drives on powered-on VMs
  community.vmware.vmware_guest:
    hostname: "{{ inventory_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: false
    uuid: "{{ item.0.uuid }}"
    force: "{{ force_disconnect | default(true) }}"    # Bypass guest OS locks
    state: present
    cdrom:
      - controller_type: "{{ 'ide' if item.1.controller_type == 'IDE' else 'sata' }}"
        controller_number: "{{ item.1.controller_number }}"
        unit_number: "{{ item.1.unit_number }}"
        type: none                                      # Disconnect media
        state: present                                  # Keep drive, remove media
  with_subelements:
    - "{{ vms_eligible_for_disconnect }}"
    - cd_devices
  loop_control:
    label: "{{ item.0.vm_name }} - Disconnect media from {{ item.1.device_label }} ({{ item.1.controller_type }} {{ item.1.controller_number }}/{{ item.1.unit_number }})"
  delegate_to: localhost
  when: 
    - not (dry_run | bool)
    - item.1.controller_type == 'IDE'                  # Only IDE controllers
    - item.0.power_state == 'poweredOn'               # Only powered-on VMs
  register: disconnect_results
  failed_when: false                                   # Capture failures for reporting
  retries: 3                                          # Handle temporary API issues
  delay: 5

# =========================================================================
# RESULT CATEGORIZATION AND PROCESSING
# =========================================================================
# Analyze operation results to determine success/failure status
# Critical for ensuring clean drives are only added after successful removals

# Categorize Strategy 1 results (media disconnects)
- name: Categorize disconnect results (IDE powered-on VMs)
  ansible.builtin.set_fact:
    successful_disconnects: >-
      {{
        disconnect_results.results | default([]) |
        selectattr('changed', 'equalto', true) |
        list
      }}
    failed_disconnects: >-
      {{
        disconnect_results.results | default([]) |
        selectattr('failed', 'defined') |
        selectattr('failed', 'equalto', true) |
        list
      }}
  when: 
    - not (dry_run | bool)
    - disconnect_results is defined

# Categorize Strategy 2 removal results
# Uses enhanced logic to properly identify successful vs failed operations
- name: Categorize removal results (SATA or powered-off VMs)
  ansible.builtin.set_fact:
    successful_removals: >-
      {{
        removal_results.results | default([]) |
        selectattr('failed', 'undefined') |
        list +
        removal_results.results | default([]) |
        selectattr('failed', 'defined') |
        selectattr('failed', 'equalto', false) |
        list
      }}
    failed_removals: >-
      {{
        removal_results.results | default([]) |
        selectattr('failed', 'defined') |
        selectattr('failed', 'equalto', true) |
        list
      }}
  when: 
    - not (dry_run | bool)
    - removal_results is defined

# Allow ESXi time to process drive removals before attempting additions
# This pause prevents race conditions in the vSphere API
- name: Pause to allow CD drive removal to complete
  ansible.builtin.pause:
    seconds: 5
  when: 
    - not (dry_run | bool)
    - successful_removals | length > 0

# Debug information to verify successful removals before attempting additions
- name: Debug successful removals before addition
  ansible.builtin.debug:
    msg: |
      Successful removals count: {{ successful_removals | length }}
      {% for removal in successful_removals %}
      VM: {{ removal.item.0.vm_name }}
      Device: {{ removal.item.1.device_label }}
      Controller: {{ removal.item.1.controller_type }} {{ removal.item.1.controller_number }}/{{ removal.item.1.unit_number }}
      Changed: {{ removal.changed }}
      Failed: {{ removal.failed | default('undefined') }}
      {% endfor %}
  when: 
    - not (dry_run | bool)
    - successful_removals is defined

# =========================================================================
# STRATEGY 2 CONTINUATION: ADD CLEAN REPLACEMENT DRIVES
# =========================================================================
# Only add replacement drives for successfully removed drives
# This ensures we don't create orphaned additional drives

- name: Add new clean CD drives without media (for removed drives only)
  community.vmware.vmware_guest:
    hostname: "{{ inventory_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: false
    uuid: "{{ item.item.0.uuid }}"
    force: "{{ force_disconnect | default(true) }}"
    state: present
    cdrom:
      - controller_type: "{{ 'ide' if item.item.1.controller_type == 'IDE' else 'sata' }}"
        controller_number: "{{ item.item.1.controller_number }}"
        unit_number: "{{ item.item.1.unit_number }}"
        type: none                                      # No media attached
        state: present                                  # Add the drive
  loop: "{{ successful_removals | default([]) }}"
  loop_control:
    label: "{{ item.item.0.vm_name }} - Add clean {{ item.item.1.controller_type }} CD drive ({{ item.item.1.controller_number }}/{{ item.item.1.unit_number }})"
  delegate_to: localhost
  when: 
    - not (dry_run | bool)
    - successful_removals | length > 0                 # Only if removals succeeded
  register: addition_results
  failed_when: false                                   # Capture failures for reporting
  retries: 3                                          # Handle temporary API issues
  delay: 5

# Categorize addition results for final reporting
- name: Categorize addition results
  ansible.builtin.set_fact:
    successful_additions: >-
      {{
        addition_results.results | default([]) |
        selectattr('changed', 'equalto', true) |
        list
      }}
    failed_additions: >-
      {{
        addition_results.results | default([]) |
        selectattr('failed', 'defined') |
        selectattr('failed', 'equalto', true) |
        list
      }}
  when: 
    - not (dry_run | bool)
    - addition_results is defined

# =========================================================================
# COMPREHENSIVE OPERATION REPORTING
# =========================================================================
# Provide detailed success and failure reporting for all operations

# Report successful Strategy 1 operations (media disconnects)
- name: Report successful media disconnects (IDE powered-on VMs)
  ansible.builtin.debug:
    msg: |
      ===================================================
      STRATEGY 1 SUCCESS - MEDIA DISCONNECTED:
      ===================================================
      VM: {{ item.item.0.vm_name }}
      Device: {{ item.item.1.device_label }}
      Original Media: {{ item.item.1.media_path }}
      Controller: {{ item.item.1.controller_type }} {{ item.item.1.controller_number }}, Unit {{ item.item.1.unit_number }}
      Result: Media disconnected (drive remains, ready for new media)
      Note: IDE drive cannot be hot-removed from powered-on VM
      ===================================================
  loop: "{{ successful_disconnects | default([]) }}"
  when: 
    - not (dry_run | bool)
    - successful_disconnects | length > 0

# Report successful Strategy 2 removals
- name: Report successful CD drive removals
  ansible.builtin.debug:
    msg: |
      ===================================================
      STRATEGY 2 SUCCESS - CD DRIVE REMOVAL:
      ===================================================
      VM: {{ item.item.0.vm_name }}
      Removed Device: {{ item.item.1.device_label }}
      Original Device Key: {{ item.item.1.device_key }}
      Removed Media: {{ item.item.1.media_path }}
      Controller: {{ item.item.1.controller_type }} {{ item.item.1.controller_number }}, Unit {{ item.item.1.unit_number }}
      Result: CD/DVD drive with media completely removed
      ===================================================
  loop: "{{ successful_removals | default([]) }}"
  when: 
    - not (dry_run | bool)
    - successful_removals | length > 0

# Report successful Strategy 2 additions
- name: Report successful clean CD drive additions
  ansible.builtin.debug:
    msg: |
      ===================================================
      STRATEGY 2 SUCCESS - CLEAN CD DRIVE ADDED:
      ===================================================
      VM: {{ item.item.item.0.vm_name }}
      Added: Clean {{ item.item.item.1.controller_type }} CD/DVD drive
      Type: none (no media attached)
      Controller: {{ item.item.item.1.controller_type }} {{ item.item.item.1.controller_number }}, Unit {{ item.item.item.1.unit_number }}
      Result: Ready for future media mounting without conflicts
      ===================================================
  loop: "{{ successful_additions | default([]) }}"
  when: 
    - not (dry_run | bool)
    - successful_additions | length > 0

# Comprehensive failure reporting for all operation types
- name: Report failed operations
  ansible.builtin.debug:
    msg: |
      ===================================================
      FAILED OPERATIONS:
      ===================================================
      {% for item in failed_disconnects | default([]) %}
      DISCONNECT FAILED:
      VM: {{ item.item.0.vm_name }}
      Device: {{ item.item.1.device_label }}
      Error: {{ item.msg | default('Unknown error') }}
      
      {% endfor %}
      {% for item in failed_removals | default([]) %}
      REMOVAL FAILED:
      VM: {{ item.item.0.vm_name }}
      Device: {{ item.item.1.device_label }}
      Error: {{ item.msg | default('Unknown error') }}
      
      {% endfor %}
      {% for item in failed_additions | default([]) %}
      ADDITION FAILED:
      VM: {{ item.item.item.0.vm_name }}
      Controller: {{ item.item.item.1.controller_type }} {{ item.item.item.1.controller_number }}, Unit {{ item.item.item.1.unit_number }}
      Error: {{ item.msg | default('Unknown error') }}
      
      {% endfor %}
      Manual intervention required via vSphere Client.
      ===================================================
  when: 
    - not (dry_run | bool)
    - (failed_disconnects | length > 0 or failed_removals | length > 0 or failed_additions | length > 0)

# Final operation summary providing complete overview
- name: Display operation summary
  ansible.builtin.debug:
    msg: |
      ===================================================
      OPERATION SUMMARY:
      ===================================================
      Total VMs processed: {{ vms_eligible_for_disconnect | length }}
      
      Strategy 1 (Media Disconnect - IDE powered-on):
      - Successful: {{ successful_disconnects | length }}
      - Failed: {{ failed_disconnects | length }}
      
      Strategy 2 (Drive Removal - SATA/powered-off):
      - Successful removals: {{ successful_removals | length }}
      - Failed removals: {{ failed_removals | length }}
      - Successful additions: {{ successful_additions | length }}
      - Failed additions: {{ failed_additions | length }}
      
      Net Result: 
      - {{ successful_disconnects | length }} VMs have media disconnected from IDE drives
      - {{ successful_additions | length }} VMs have clean replacement drives
      ===================================================
  when: not (dry_run | bool)

# =========================================================================
# STRATEGY 2: DRIVE REPLACEMENT (SATA or Powered-Off VMs)
# =========================================================================
# For SATA drives or powered-off VMs, complete removal and replacement

- name: Strategy 2 - Remove CD drives (SATA or powered-off VMs only)
  community.vmware.vmware_guest:
    hostname: "{{ inventory_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: false
    uuid: "{{ item.0.uuid }}"
    force: "{{ force_disconnect | default(true) }}"
    state: present
    cdrom:
      - controller_type: "{{ 'ide' if item.1.controller_type == 'IDE' else 'sata' }}"
        controller_number: "{{ item.1.controller_number }}"
        unit_number: "{{ item.1.unit_number }}"
        state: absent                                   # Completely remove drive
  with_subelements:
    - "{{ vms_eligible_for_disconnect }}"
    - cd_devices
  loop_control:
    label: "{{ item.0.vm_name }} - Remove {{ item.1.device_label }} ({{ item.1.controller_type }} {{ item.1.controller_number }}/{{ item.1.unit_number }})"
  delegate_to: localhost
  when: 
    - not (dry_run | bool)
    - not (item.1.controller_type == 'IDE' and item.0.power_state == 'poweredOn')  # Exclude IDE+powered-on
  register: removal_results
  failed_when: false                                   # Capture failures for reporting
  retries: 3