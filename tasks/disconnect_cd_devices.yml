---
- name: Filter VMs for disconnect operations
  ansible.builtin.set_fact:
    vms_eligible_for_disconnect: >-
      {{
        vms_with_cd_media |
        rejectattr('vm_name', 'in', vm_blacklist) |
        selectattr('cd_devices', 'defined') |
        list
      }}

- name: Calculate disconnect statistics
  ansible.builtin.set_fact:
    all_cd_devices: >-
      {{
        vms_eligible_for_disconnect |
        map(attribute='cd_devices') |
        flatten
      }}
    hot_removable_devices: >-
      {{
        vms_eligible_for_disconnect |
        map(attribute='cd_devices') |
        flatten |
        selectattr('hot_removable', 'equalto', true) |
        list
      }}
    manual_intervention_devices: >-
      {{
        vms_eligible_for_disconnect |
        map(attribute='cd_devices') |
        flatten |
        selectattr('hot_removable', 'equalto', false) |
        list
      }}

- name: Display dry-run information
  ansible.builtin.debug:
    msg: |
      ===================================================
      DRY RUN MODE - NO CHANGES WILL BE MADE
      ===================================================
      VMs that would be processed: {{ vms_eligible_for_disconnect | length }}
      Hot-removable devices that would be disconnected: {{ hot_removable_devices | length }}
      Devices requiring manual intervention: {{ manual_intervention_devices | length }}
      
      Hot-removable devices:
      {% for vm in vms_eligible_for_disconnect %}
      {% for cd in vm.cd_devices %}
      {% if cd.hot_removable %}
      - {{ vm.vm_name }}: {{ cd.device_label }} ({{ cd.media_path }})
      {% endif %}
      {% endfor %}
      {% endfor %}
      ===================================================
  when: dry_run | bool

- name: Disconnect CD devices using PowerCLI (handles dialogs)
  ansible.builtin.shell: |
    pwsh -Command "
    Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -Confirm:\$false -Scope Session
    Connect-VIServer -Server {{ inventory_hostname }} -User {{ vcenter_username }} -Password '{{ vcenter_password }}' | Out-Null
    \$vm = Get-VM | Where-Object {(\$_.ExtensionData.Config.Uuid) -eq '{{ item.0.uuid }}'}
    \$cdrom = \$vm | Get-CDDrive | Where-Object {(\$_.ExtensionData.Key) -eq {{ item.1.device_key }}}
    if (\$cdrom) {
      try {
        Set-CDDrive -CD \$cdrom -NoMedia -Confirm:\$false -ErrorAction Stop
        Write-Output 'SUCCESS: Disconnected CD drive'
      } catch {
        if (\$_.Exception.Message -like '*locked*') {
          # Force disconnect even if locked
          \$spec = New-Object VMware.Vim.VirtualMachineConfigSpec
          \$deviceSpec = New-Object VMware.Vim.VirtualDeviceConfigSpec
          \$deviceSpec.Operation = [VMware.Vim.VirtualDeviceConfigSpecOperation]::edit
          \$deviceSpec.Device = \$cdrom.ExtensionData
          \$deviceSpec.Device.Backing = New-Object VMware.Vim.VirtualCdromRemotePassthroughBackingInfo
          \$deviceSpec.Device.Connectable.Connected = \$false
          \$spec.DeviceChange = \$deviceSpec
          \$vm.ExtensionData.ReconfigVM(\$spec)
          Write-Output 'SUCCESS: Force disconnected locked CD drive'
        } else {
          Write-Output \"ERROR: \$(\$_.Exception.Message)\"
        }
      }
    }
    Disconnect-VIServer -Confirm:\$false
    "
  with_subelements:
    - "{{ vms_eligible_for_disconnect }}"
    - cd_devices
  loop_control:
    label: "{{ item.0.vm_name }} - {{ item.1.device_label }}"
  delegate_to: localhost
  when: 
    - not (dry_run | bool)
    - item.1.hot_removable | bool
  register: powercli_disconnect_results
  failed_when: false

- name: Report PowerCLI disconnect results
  ansible.builtin.debug:
    msg: |
      ===================================================
      CD DISCONNECT RESULT:
      ===================================================
      VM: {{ item.item.0.vm_name }}
      Device: {{ item.item.1.device_label }}
      Result: {{ item.stdout | default('No output') }}
      Error: {{ item.stderr | default('None') }}
      ===================================================
  loop: "{{ powercli_disconnect_results.results | default([]) }}"
  when: not (dry_run | bool)

- name: Report devices requiring manual intervention
  ansible.builtin.debug:
    msg: |
      ===================================================
      MANUAL INTERVENTION REQUIRED:
      ===================================================
      VM: {{ item.0.vm_name }}
      Device: {{ item.1.device_label }}
      Controller: {{ item.1.controller_type }}
      Media: {{ item.1.media_path }}
      
      This device cannot be hot-removed. Use vSphere Client to:
      1. Edit VM settings
      2. Remove the CD/DVD drive manually
      3. Or power off the VM and retry this playbook
      ===================================================
  with_subelements:
    - "{{ vms_eligible_for_disconnect }}"
    - cd_devices
  loop_control:
    label: "{{ item.0.vm_name }} - {{ item.1.device_label }}"
  when: not (item.1.hot_removable | bool)