---
#===============================================================================
# Enhanced CD/DVD Device Disconnect Operations
#===============================================================================
# Purpose: Perform two-step CD device removal and clean drive addition
# Called by: cdmounted.yml main playbook when disconnect is enabled
#
# Description:
#   This task file implements an enhanced disconnect process that addresses
#   common VMware CD/DVD device issues by completely removing drives with
#   media and then adding clean drives without media. This approach prevents
#   media lock conflicts and ensures VMs remain functional for future use.
#
# Two-Step Process:
#   Step 1: Remove existing CD drives with connected media
#   Step 2: Add new clean CD drives without media attached
#
# Features:
#   - Dry run mode support with detailed operation preview
#   - VM blacklist filtering
#   - Force disconnect to bypass guest OS locks
#   - Comprehensive error handling and retry logic
#   - Detailed success/failure reporting
#
# Variables Modified:
#   - vms_eligible_for_disconnect: Filtered list of VMs for processing
#   - successful_removals/failed_removals: Step 1 results tracking
#   - successful_additions/failed_additions: Step 2 results tracking
#===============================================================================

#-------------------------------------------------------------------------------
# Initialize Operation Variables
#-------------------------------------------------------------------------------
# Reset all tracking variables for the disconnect operations
- name: Initialize disconnect variables
  ansible.builtin.set_fact:
    vms_eligible_for_disconnect: []
    successful_removals: []
    failed_removals: []
    successful_additions: []
    failed_additions: []

#-------------------------------------------------------------------------------
# VM Filtering for Disconnect Operations
#-------------------------------------------------------------------------------
# Filter VMs based on blacklist and ensure they have valid CD device data
- name: Filter VMs for disconnect operations
  ansible.builtin.set_fact:
    vms_eligible_for_disconnect: >-
      {{
        vms_with_cd_media |
        rejectattr('vm_name', 'in', vm_blacklist) |
        selectattr('cd_devices', 'defined') |
        list
      }}

#-------------------------------------------------------------------------------
# Dry Run Information Display
#-------------------------------------------------------------------------------
# Show detailed preview of what operations would be performed
# Provides step-by-step breakdown for each VM and device
- name: Display dry-run information
  ansible.builtin.debug:
    msg: |
      ===================================================
      DRY RUN MODE - NO CHANGES WILL BE MADE
      ===================================================
      VMs that would be processed: {{ vms_eligible_for_disconnect | length }}
      Force disconnect enabled: {{ force_disconnect | default(true) }}
      
      Operation Plan:
      {% for vm in vms_eligible_for_disconnect %}
      VM: {{ vm.vm_name }}
      {% for cd in vm.cd_devices %}
      - STEP 1: Remove {{ cd.device_label }} (Key: {{ cd.device_key }})
        Media: {{ cd.media_path }}
        Controller: {{ cd.controller_type }}
      - STEP 2: Add new clean {{ cd.controller_type }} CD drive without media
      {% endfor %}
      {% endfor %}
      ===================================================
  when: dry_run | bool

#===============================================================================
# STEP 1: CD DRIVE REMOVAL OPERATIONS
#===============================================================================

#-------------------------------------------------------------------------------
# Remove Existing CD Drives with Media
#-------------------------------------------------------------------------------
# Completely removes CD drives that have connected media
# Uses controller type detection to set appropriate parameters
- name: Step 1 - Remove CD drives with connected media
  community.vmware.vmware_guest:
    hostname: "{{ inventory_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: false
    uuid: "{{ item.0.uuid }}"                    # Target VM UUID
    force: "{{ force_disconnect | default(true) }}"  # Bypass guest OS locks
    state: present                               # Modify existing VM
    cdrom:
      # Controller type mapping: IDE vs SATA
      - controller_type: "{{ 'ide' if item.1.controller_type == 'IDE' else 'sata' }}"
        controller_number: "{{ 0 if item.1.controller_type == 'IDE' else 0 }}"
        unit_number: "{{ 0 if item.1.controller_type == 'IDE' else 0 }}"
        state: absent                            # Remove the device
  with_subelements:
    - "{{ vms_eligible_for_disconnect }}"
    - cd_devices
  loop_control:
    label: "{{ item.0.vm_name }} - Remove {{ item.1.device_label }}"
  delegate_to: localhost
  when: 
    - not (dry_run | bool)                       # Skip in dry run mode
  register: removal_results
  failed_when: false                             # Capture failures, don't stop
  retries: 3                                     # Retry up to 3 times
  delay: 5                                       # Wait 5 seconds between retries

#-------------------------------------------------------------------------------
# Categorize Removal Results
#-------------------------------------------------------------------------------
# Separate successful and failed removal operations for tracking and reporting
- name: Categorize removal results
  ansible.builtin.set_fact:
    successful_removals: >-
      {{
        removal_results.results | default([]) |
        selectattr('changed', 'equalto', true) |
        list
      }}
    failed_removals: >-
      {{
        removal_results.results | default([]) |
        selectattr('failed', 'defined') |
        selectattr('failed', 'equalto', true) |
        list
      }}
  when: 
    - not (dry_run | bool)
    - removal_results is defined

#-------------------------------------------------------------------------------
# Processing Pause
#-------------------------------------------------------------------------------
# Brief pause to allow ESXi to complete device removal processing
# Prevents race conditions between removal and addition operations
- name: Pause to allow CD drive removal to complete
  ansible.builtin.pause:
    seconds: 5
  when: 
    - not (dry_run | bool)
    - successful_removals | length > 0

#===============================================================================
# STEP 2: CLEAN CD DRIVE ADDITION OPERATIONS
#===============================================================================

#-------------------------------------------------------------------------------
# Add New Clean CD Drives
#-------------------------------------------------------------------------------
# Adds new CD drives without media for VMs where removal was successful
# Maintains VM functionality while preventing media lock issues
- name: Step 2 - Add new clean CD drives without media
  community.vmware.vmware_guest:
    hostname: "{{ inventory_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: false
    uuid: "{{ item.item.0.uuid }}"               # Target VM UUID from removal result
    force: "{{ force_disconnect | default(true) }}"
    state: present
    cdrom:
      # Use same controller type as original device
      - controller_type: "{{ 'ide' if item.item.1.controller_type == 'IDE' else 'sata' }}"
        controller_number: "{{ 0 if item.item.1.controller_type == 'IDE' else 0 }}"
        unit_number: "{{ 0 if item.item.1.controller_type == 'IDE' else 0 }}"
        type: none                               # No media attached
        state: present                           # Add the device
  loop: "{{ successful_removals | default([]) }}"
  loop_control:
    label: "{{ item.item.0.vm_name }} - Add clean {{ item.item.1.controller_type }} CD drive"
  delegate_to: localhost
  when: 
    - not (dry_run | bool)
    - successful_removals | length > 0
  register: addition_results
  failed_when: false                             # Capture failures, don't stop
  retries: 3                                     # Retry up to 3 times
  delay: 5                                       # Wait 5 seconds between retries

#-------------------------------------------------------------------------------
# Categorize Addition Results
#-------------------------------------------------------------------------------
# Separate successful and failed addition operations for tracking and reporting
- name: Categorize addition results
  ansible.builtin.set_fact:
    successful_additions: >-
      {{
        addition_results.results | default([]) |
        selectattr('changed', 'equalto', true) |
        list
      }}
    failed_additions: >-
      {{
        addition_results.results | default([]) |
        selectattr('failed', 'defined') |
        selectattr('failed', 'equalto', true) |
        list
      }}
  when: 
    - not (dry_run | bool)
    - addition_results is defined

#===============================================================================
# REPORTING SECTION
#===============================================================================

#-------------------------------------------------------------------------------
# Successful Removal Reporting
#-------------------------------------------------------------------------------
# Report detailed information about successful CD drive removals
- name: Report successful CD drive removals
  ansible.builtin.debug:
    msg: |
      ===================================================
      STEP 1 SUCCESS - CD DRIVE REMOVAL:
      ===================================================
      VM: {{ item.item.0.vm_name }}
      Removed Device: {{ item.item.1.device_label }}
      Original Device Key: {{ item.item.1.device_key }}
      Removed Media: {{ item.item.1.media_path }}
      Controller Type: {{ item.item.1.controller_type }}
      Result: CD/DVD drive with media completely removed
      ===================================================
  loop: "{{ successful_removals | default([]) }}"
  when: 
    - not (dry_run | bool)
    - successful_removals | length > 0

#-------------------------------------------------------------------------------
# Successful Addition Reporting
#-------------------------------------------------------------------------------
# Report detailed information about successful clean CD drive additions
- name: Report successful clean CD drive additions
  ansible.builtin.debug:
    msg: |
      ===================================================
      STEP 2 SUCCESS - CLEAN CD DRIVE ADDED:
      ===================================================
      VM: {{ item.item.item.0.vm_name }}
      Added: Clean {{ item.item.item.1.controller_type }} CD/DVD drive
      Type: none (no media attached)
      Controller: {{ 'IDE' if item.item.item.1.controller_type == 'IDE' else 'SATA' }} 0, Unit 0
      Result: Ready for future media mounting without conflicts
      ===================================================
  loop: "{{ successful_additions | default([]) }}"
  when: 
    - not (dry_run | bool)
    - successful_additions | length > 0

#-------------------------------------------------------------------------------
# Failed Removal Reporting
#-------------------------------------------------------------------------------
# Report detailed information about failed CD drive removals
- name: Report failed CD drive removals
  ansible.builtin.debug:
    msg: |
      ===================================================
      STEP 1 FAILED - CD DRIVE REMOVAL:
      ===================================================
      VM: {{ item.item.0.vm_name }}
      Device: {{ item.item.1.device_label }}
      Media: {{ item.item.1.media_path }}
      Controller Type: {{ item.item.1.controller_type }}
      Error: {{ item.msg | default('Unknown error') }}
      
      Manual intervention required via vSphere Client.
      ===================================================
  loop: "{{ failed_removals | default([]) }}"
  when: 
    - not (dry_run | bool)
    - failed_removals | length > 0

#-------------------------------------------------------------------------------
# Failed Addition Reporting
#-------------------------------------------------------------------------------
# Report detailed information about failed clean CD drive additions
- name: Report failed clean CD drive additions
  ansible.builtin.debug:
    msg: |
      ===================================================
      STEP 2 FAILED - CLEAN CD DRIVE ADDITION:
      ===================================================
      VM: {{ item.item.item.0.vm_name }}
      Controller Type: {{ item.item.item.1.controller_type }}
      Error: {{ item.msg | default('Unknown error') }}
      
      Note: Original drive was removed but clean replacement failed.
      Manually add CD drive via vSphere Client if needed.
      ===================================================
  loop: "{{ failed_additions | default([]) }}"
  when: 
    - not (dry_run | bool)
    - failed_additions | length > 0

#-------------------------------------------------------------------------------
# Operation Summary Display
#-------------------------------------------------------------------------------
# Display comprehensive summary of all disconnect operations
- name: Display operation summary
  ansible.builtin.debug:
    msg: |
      ===================================================
      OPERATION SUMMARY:
      ===================================================
      Total VMs processed: {{ vms_eligible_for_disconnect | length }}
      Step 1 (Removals):
      - Successful: {{ successful_removals | length }}
      - Failed: {{ failed_removals | length }}
      
      Step 2 (Clean Additions):
      - Successful: {{ successful_additions | length }}
      - Failed: {{ failed_additions | length }}
      
      Net Result: {{ successful_additions | length }} VMs now have clean CD drives
      ===================================================
  when: not (dry_run | bool)