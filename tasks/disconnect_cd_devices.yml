---
- name: Filter VMs for disconnect operations
  ansible.builtin.set_fact:
    vms_eligible_for_disconnect: >-
      {{
        vms_with_cd_media |
        rejectattr('vm_name', 'in', vm_blacklist) |
        selectattr('cd_devices', 'defined') |
        list
      }}

- name: Calculate disconnect statistics
  ansible.builtin.set_fact:
    all_cd_devices: >-
      {{
        vms_eligible_for_disconnect |
        map(attribute='cd_devices') |
        flatten
      }}
    hot_removable_devices: >-
      {{
        vms_eligible_for_disconnect |
        map(attribute='cd_devices') |
        flatten |
        selectattr('hot_removable', 'equalto', true) |
        list
      }}
    manual_intervention_devices: >-
      {{
        vms_eligible_for_disconnect |
        map(attribute='cd_devices') |
        flatten |
        selectattr('hot_removable', 'equalto', false) |
        list
      }}

- name: Display dry-run information
  ansible.builtin.debug:
    msg: |
      ===================================================
      DRY RUN MODE - NO CHANGES WILL BE MADE
      ===================================================
      VMs that would be processed: {{ vms_eligible_for_disconnect | length }}
      Hot-removable devices that would be disconnected: {{ hot_removable_devices | length }}
      Devices requiring manual intervention: {{ manual_intervention_devices | length }}
      
      Hot-removable devices:
      {% for vm in vms_eligible_for_disconnect %}
      {% for cd in vm.cd_devices %}
      {% if cd.hot_removable %}
      - {{ vm.vm_name }}: {{ cd.device_label }} ({{ cd.media_path }})
      {% endif %}
      {% endfor %}
      {% endfor %}
      ===================================================
  when: dry_run | bool

- name: Disconnect CD devices using enhanced PowerCLI with comprehensive dialog suppression
  ansible.builtin.shell: |
    pwsh -NoProfile -NonInteractive -Command "
    # Set all preference variables to suppress output and prompts
    \$ErrorActionPreference = 'Continue'
    \$WarningPreference = 'SilentlyContinue'
    \$InformationPreference = 'SilentlyContinue'
    \$VerbosePreference = 'SilentlyContinue'
    \$DebugPreference = 'SilentlyContinue'
    \$ProgressPreference = 'SilentlyContinue'
    
    # Suppress PowerShell startup banner and set culture
    [System.Threading.Thread]::CurrentThread.CurrentUICulture = 'en-US'
    
    try {
      # Import PowerCLI modules with suppressed output
      Import-Module VMware.PowerCLI -Force -Scope Local -ErrorAction SilentlyContinue | Out-Null
      
      # Comprehensive PowerCLI configuration to suppress ALL dialogs
      \$null = Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCEIP \$false -Confirm:\$false -Scope Session -DefaultVIServerMode Single -WebOperationTimeoutSeconds 300 -DisplayDeprecationWarnings \$false -ErrorAction SilentlyContinue
      
      # Additional configuration for specific scenarios
      \$null = Set-PowerCLIConfiguration -ProxyPolicy UseSystemProxy -Confirm:\$false -Scope Session -ErrorAction SilentlyContinue
      
      Write-Output \"INFO: Connecting to ESXi host {{ inventory_hostname }}\"
      
      # Connect to ESXi with timeout and retry logic
      \$connectParams = @{
        Server = '{{ inventory_hostname }}'
        User = '{{ vcenter_username }}'
        Password = '{{ vcenter_password }}'
        Force = \$true
        ErrorAction = 'Stop'
      }
      
      \$connection = Connect-VIServer @connectParams
      
      if (-not \$connection) {
        Write-Output 'ERROR: Failed to establish connection to ESXi host'
        exit 1
      }
      
      Write-Output \"INFO: Successfully connected to {{ inventory_hostname }}\"
      
      # Find VM by UUID with better error handling
      \$vm = Get-VM -ErrorAction SilentlyContinue | Where-Object { 
        \$_.ExtensionData.Config.Uuid -eq '{{ item.0.uuid }}' 
      }
      
      if (-not \$vm) {
        Write-Output 'ERROR: VM not found with UUID {{ item.0.uuid }}'
        exit 1
      }
      
      Write-Output \"INFO: Found VM: \$(\$vm.Name)\"
      
      # Get all CD/DVD drives and find the specific one
      \$allCDDrives = \$vm | Get-CDDrive -ErrorAction SilentlyContinue
      
      if (-not \$allCDDrives) {
        Write-Output 'WARNING: No CD/DVD drives found on this VM'
        exit 0
      }
      
      \$cdrom = \$allCDDrives | Where-Object { \$_.ExtensionData.Key -eq {{ item.1.device_key }} }
      
      if (-not \$cdrom) {
        Write-Output 'ERROR: CD/DVD drive not found with device key {{ item.1.device_key }}'
        Write-Output \"Available CD/DVD drives: \$(\$allCDDrives | ForEach-Object { \$_.ExtensionData.Key })\"
        exit 1
      }
      
      Write-Output \"INFO: Found CD/DVD drive: \$(\$cdrom.Name) (Key: \$(\$cdrom.ExtensionData.Key))\"
      
      # Check current media state with detailed information
      \$hasIsoMedia = \$cdrom.IsoPath -ne \$null -and \$cdrom.IsoPath -ne ''
      \$hasHostDevice = \$cdrom.HostDevice -ne \$null -and \$cdrom.HostDevice -ne ''
      \$isConnected = \$cdrom.ExtensionData.Connectable.Connected
      
      Write-Output \"INFO: Current state - ISO: \$hasIsoMedia, HostDevice: \$hasHostDevice, Connected: \$isConnected\"
      
      if (-not (\$hasIsoMedia -or \$hasHostDevice -or \$isConnected)) {
        Write-Output 'INFO: CD/DVD drive already has no media connected'
        exit 0
      }
      
      # Display what we're disconnecting
      if (\$hasIsoMedia) {
        Write-Output \"INFO: Disconnecting ISO file: \$(\$cdrom.IsoPath)\"
      }
      if (\$hasHostDevice) {
        Write-Output \"INFO: Disconnecting host device: \$(\$cdrom.HostDevice)\"
      }
      
      # Attempt to disconnect media with retry logic
      Write-Output \"INFO: Attempting to disconnect media from \$(\$cdrom.Name)\"
      
      \$maxRetries = 3
      \$retryCount = 0
      \$success = \$false
      
      while (\$retryCount -lt \$maxRetries -and -not \$success) {
        try {
          \$retryCount++
          Write-Output \"INFO: Disconnect attempt \$retryCount of \$maxRetries\"
          
          # Use Set-CDDrive with no media
          \$result = Set-CDDrive -CD \$cdrom -NoMedia -Confirm:\$false -ErrorAction Stop
          
          # Verify the disconnection
          \$cdrom = \$vm | Get-CDDrive | Where-Object { \$_.ExtensionData.Key -eq {{ item.1.device_key }} }
          \$stillConnected = (\$cdrom.IsoPath -ne \$null -and \$cdrom.IsoPath -ne '') -or (\$cdrom.HostDevice -ne \$null -and \$cdrom.HostDevice -ne '')
          
          if (-not \$stillConnected) {
            Write-Output 'SUCCESS: Successfully disconnected CD/DVD media'
            \$success = \$true
          } else {
            Write-Output 'WARNING: Command executed but media may still be connected'
          }
          
        }
        catch [VMware.VimAutomation.ViCore.Types.V1.ErrorHandling.InvalidDeviceOperation] {
          Write-Output 'WARNING: Device operation not supported while VM is running. VM may need to be powered off.'
          break
        }
        catch [VMware.VimAutomation.ViCore.Types.V1.ErrorHandling.InvalidState] {
          Write-Output 'WARNING: Device is in invalid state. May require manual intervention via vSphere Client.'
          break
        }
        catch [System.Exception] {
          \$errorMsg = \$_.Exception.Message
          Write-Output \"WARNING: Attempt \$retryCount failed: \$errorMsg\"
          
          if (\$errorMsg -match 'locked|busy|in use|cannot complete') {
            Write-Output 'WARNING: Device appears to be locked or in use by another process'
            if (\$retryCount -lt \$maxRetries) {
              Write-Output 'INFO: Waiting 2 seconds before retry...'
              Start-Sleep -Seconds 2
            }
          } else {
            Write-Output \"ERROR: Unexpected error: \$errorMsg\"
            break
          }
        }
      }
      
      if (-not \$success -and \$retryCount -ge \$maxRetries) {
        Write-Output 'ERROR: Failed to disconnect media after all retry attempts'
      }
      
    }
    catch [System.Exception] {
      Write-Output \"ERROR: Script execution failed: \$(\$_.Exception.Message)\"
    }
    finally {
      # Always disconnect from vCenter/ESXi
      if (\$connection) {
        try {
          Write-Output 'INFO: Disconnecting from ESXi host'
          Disconnect-VIServer -Server \$connection -Confirm:\$false -Force -ErrorAction SilentlyContinue
        } catch {
          # Ignore disconnect errors
        }
      }
    }
    "
  with_subelements:
    - "{{ vms_eligible_for_disconnect }}"
    - cd_devices
  loop_control:
    label: "{{ item.0.vm_name }} - {{ item.1.device_label }}"
  delegate_to: localhost
  when: 
    - not (dry_run | bool)
    - item.1.hot_removable | bool
  register: powercli_disconnect_results
  failed_when: false
  vars:
    ansible_command_timeout: 300

- name: Report PowerCLI disconnect results
  ansible.builtin.debug:
    msg: |
      ===================================================
      CD DISCONNECT RESULT:
      ===================================================
      VM: {{ item.item.0.vm_name }}
      Device: {{ item.item.1.device_label }}
      Media Path: {{ item.item.1.media_path }}
      Hot Removable: {{ item.item.1.hot_removable }}
      Return Code: {{ item.rc | default('N/A') }}
      
      Output:
      {{ item.stdout | default('No output') | indent(2) }}
      {% if item.stderr and item.stderr | length > 0 %}
      
      Errors:
      {{ item.stderr | indent(2) }}
      {% endif %}
      ===================================================
  loop: "{{ powercli_disconnect_results.results | default([]) }}"
  when: not (dry_run | bool)

- name: Report devices requiring manual intervention
  ansible.builtin.debug:
    msg: |
      ===================================================
      MANUAL INTERVENTION REQUIRED:
      ===================================================
      VM: {{ item.0.vm_name }}
      Device: {{ item.1.device_label }}
      Controller: {{ item.1.controller_type }}
      Media: {{ item.1.media_path }}
      Device Key: {{ item.1.device_key }}
      
      This device cannot be hot-removed. Options:
      1. Use vSphere Client to manually disconnect
      2. Power off the VM and retry this playbook  
      3. Edit VM settings and remove the CD/DVD drive
      ===================================================
  with_subelements:
    - "{{ vms_eligible_for_disconnect }}"
    - cd_devices
  loop_control:
    label: "{{ item.0.vm_name }} - {{ item.1.device_label }}"
  when: not (item.1.hot_removable | bool)

- name: Create summary of disconnect operations
  ansible.builtin.set_fact:
    successful_disconnects: >-
      {{
        powercli_disconnect_results.results | default([]) |
        selectattr('stdout', 'search', 'SUCCESS') |
        list
      }}
    failed_disconnects: >-
      {{
        powercli_disconnect_results.results | default([]) |
        rejectattr('stdout', 'search', 'SUCCESS') |
        selectattr('stdout', 'search', 'ERROR') |
        list
      }}
    warning_disconnects: >-
      {{
        powercli_disconnect_results.results | default([]) |
        selectattr('stdout', 'search', 'WARNING') |
        list
      }}
    info_disconnects: >-
      {{
        powercli_disconnect_results.results | default([]) |
        selectattr('stdout', 'search', 'INFO: CD/DVD drive already has no media') |
        list
      }}

- name: Update disconnect results for summary reporting
  ansible.builtin.set_fact:
    disconnect_results:
      results: "{{ powercli_disconnect_results.results | default([]) }}"
      successful_count: "{{ successful_disconnects | length }}"
      failed_count: "{{ failed_disconnects | length }}"
      warning_count: "{{ warning_disconnects | length }}"
      already_disconnected_count: "{{ info_disconnects | length }}"
      total_processed: "{{ powercli_disconnect_results.results | default([]) | length }}"
  when: powercli_disconnect_results is defined

- name: Display disconnect operation summary
  ansible.builtin.debug:
    msg: |
      ===================================================
      DISCONNECT OPERATIONS SUMMARY:
      ===================================================
      Total devices processed: {{ disconnect_results.total_processed | default(0) }}
      Successful disconnections: {{ disconnect_results.successful_count | default(0) }}
      Already disconnected: {{ disconnect_results.already_disconnected_count | default(0) }}
      Warnings (may need manual intervention): {{ disconnect_results.warning_count | default(0) }}
      Errors: {{ disconnect_results.failed_count | default(0) }}
      Manual intervention required: {{ manual_intervention_devices | length }}
      ===================================================
  when: 
    - not (dry_run | bool)
    - disconnect_results is defined