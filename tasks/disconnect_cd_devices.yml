---
- name: Filter VMs for disconnect operations
  ansible.builtin.set_fact:
    vms_eligible_for_disconnect: >-
      {{
        vms_with_cd_media |
        rejectattr('vm_name', 'in', vm_blacklist) |
        selectattr('cd_devices', 'defined') |
        list
      }}

- name: Calculate disconnect statistics
  ansible.builtin.set_fact:
    all_cd_devices: >-
      {{
        vms_eligible_for_disconnect |
        map(attribute='cd_devices') |
        flatten
      }}
    hot_removable_devices: >-
      {{
        vms_eligible_for_disconnect |
        map(attribute='cd_devices') |
        flatten |
        selectattr('hot_removable', 'equalto', true) |
        list
      }}
    manual_intervention_devices: >-
      {{
        vms_eligible_for_disconnect |
        map(attribute='cd_devices') |
        flatten |
        selectattr('hot_removable', 'equalto', false) |
        list
      }}

- name: Display dry-run information
  ansible.builtin.debug:
    msg: |
      ===================================================
      DRY RUN MODE - NO CHANGES WILL BE MADE
      ===================================================
      VMs that would be processed: {{ vms_eligible_for_disconnect | length }}
      Hot-removable devices that would be disconnected: {{ hot_removable_devices | length }}
      Devices requiring manual intervention: {{ manual_intervention_devices | length }}
      
      Hot-removable devices:
      {% for vm in vms_eligible_for_disconnect %}
      {% for cd in vm.cd_devices %}
      {% if cd.hot_removable %}
      - {{ vm.vm_name }}: {{ cd.device_label }} ({{ cd.media_path }})
      {% endif %}
      {% endfor %}
      {% endfor %}
      ===================================================
  when: dry_run | bool

- name: Disconnect CD devices using improved PowerCLI with dialog suppression
  ansible.builtin.shell: |
    pwsh -Command "
    # Comprehensive PowerCLI configuration for dialog suppression
    \$ErrorActionPreference = 'Continue'
    \$WarningPreference = 'SilentlyContinue'
    \$InformationPreference = 'SilentlyContinue'
    \$VerbosePreference = 'SilentlyContinue'
    \$DebugPreference = 'SilentlyContinue'
    
    try {
      # Import PowerCLI and suppress all prompts
      Import-Module VMware.PowerCLI -Force -ErrorAction SilentlyContinue
      
      # Configure PowerCLI to never prompt
      Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCEIP \$false -Confirm:\$false -Scope Session -DefaultVIServerMode Single -WebOperationTimeoutSeconds 300 -ErrorAction SilentlyContinue
      
      # Connect to ESXi host
      \$connection = Connect-VIServer -Server '{{ inventory_hostname }}' -User '{{ vcenter_username }}' -Password '{{ vcenter_password }}' -Force -ErrorAction Stop
      
      # Find VM by UUID (most reliable method)
      \$vm = Get-VM | Where-Object { \$_.ExtensionData.Config.Uuid -eq '{{ item.0.uuid }}' }
      
      if (-not \$vm) {
        Write-Output 'ERROR: VM not found with UUID {{ item.0.uuid }}'
        exit 1
      }
      
      # Get the specific CD/DVD drive
      \$allCDDrives = \$vm | Get-CDDrive
      \$cdrom = \$allCDDrives | Where-Object { \$_.ExtensionData.Key -eq {{ item.1.device_key }} }
      
      if (-not \$cdrom) {
        Write-Output 'ERROR: CD/DVD drive not found with device key {{ item.1.device_key }}'
        exit 1
      }
      
      # Check current state
      \$hasMedia = (\$cdrom.IsoPath -ne \$null -and \$cdrom.IsoPath -ne '') -or (\$cdrom.HostDevice -ne \$null -and \$cdrom.HostDevice -ne '')
      
      if (-not \$hasMedia) {
        Write-Output 'INFO: CD/DVD drive already has no media connected'
        exit 0
      }
      
      # Attempt to disconnect media
      Write-Output \"INFO: Attempting to disconnect media from {\$(\$cdrom.Name)}\"
      
      # Use Set-CDDrive with comprehensive error handling
      try {
        \$result = Set-CDDrive -CD \$cdrom -NoMedia -Confirm:\$false -ErrorAction Stop
        Write-Output 'SUCCESS: Successfully disconnected CD/DVD media'
      }
      catch [VMware.VimAutomation.ViCore.Types.V1.ErrorHandling.InvalidDeviceOperation] {
        Write-Output 'WARNING: Device operation not supported while VM is running. Consider powering off VM.'
      }
      catch [VMware.VimAutomation.ViCore.Types.V1.ErrorHandling.InvalidState] {
        Write-Output 'WARNING: Device is in invalid state. May require manual intervention.'
      }
      catch [System.Exception] {
        \$errorMsg = \$_.Exception.Message
        if (\$errorMsg -match 'locked|busy|use') {
          Write-Output \"WARNING: Device appears to be locked or in use: \$errorMsg\"
        } else {
          Write-Output \"ERROR: Unexpected error: \$errorMsg\"
        }
      }
      
    }
    catch [System.Exception] {
      Write-Output \"ERROR: Script execution failed: \$(\$_.Exception.Message)\"
    }
    finally {
      # Always disconnect from vCenter/ESXi
      if (\$connection) {
        try {
          Disconnect-VIServer -Server \$connection -Confirm:\$false -Force -ErrorAction SilentlyContinue
        } catch {
          # Ignore disconnect errors
        }
      }
    }
    "
  with_subelements:
    - "{{ vms_eligible_for_disconnect }}"
    - cd_devices
  loop_control:
    label: "{{ item.0.vm_name }} - {{ item.1.device_label }}"
  delegate_to: localhost
  when: 
    - not (dry_run | bool)
    - item.1.hot_removable | bool
  register: powercli_disconnect_results
  failed_when: false

- name: Report PowerCLI disconnect results
  ansible.builtin.debug:
    msg: |
      ===================================================
      CD DISCONNECT RESULT:
      ===================================================
      VM: {{ item.item.0.vm_name }}
      Device: {{ item.item.1.device_label }}
      Media Path: {{ item.item.1.media_path }}
      Result: {{ item.stdout | default('No output') }}
      {% if item.stderr and item.stderr | length > 0 %}
      Error: {{ item.stderr }}
      {% endif %}
      Return Code: {{ item.rc | default('N/A') }}
      ===================================================
  loop: "{{ powercli_disconnect_results.results | default([]) }}"
  when: not (dry_run | bool)

- name: Report devices requiring manual intervention
  ansible.builtin.debug:
    msg: |
      ===================================================
      MANUAL INTERVENTION REQUIRED:
      ===================================================
      VM: {{ item.0.vm_name }}
      Device: {{ item.1.device_label }}
      Controller: {{ item.1.controller_type }}
      Media: {{ item.1.media_path }}
      
      This device cannot be hot-removed. Options:
      1. Use vSphere Client to manually disconnect
      2. Power off the VM and retry this playbook  
      3. Edit VM settings and remove the CD/DVD drive
      ===================================================
  with_subelements:
    - "{{ vms_eligible_for_disconnect }}"
    - cd_devices
  loop_control:
    label: "{{ item.0.vm_name }} - {{ item.1.device_label }}"
  when: not (item.1.hot_removable | bool)

- name: Create summary of disconnect operations
  ansible.builtin.set_fact:
    successful_disconnects: >-
      {{
        powercli_disconnect_results.results | default([]) |
        selectattr('stdout', 'search', 'SUCCESS') |
        list
      }}
    failed_disconnects: >-
      {{
        powercli_disconnect_results.results | default([]) |
        rejectattr('stdout', 'search', 'SUCCESS') |
        selectattr('stdout', 'search', 'ERROR') |
        list
      }}
    warning_disconnects: >-
      {{
        powercli_disconnect_results.results | default([]) |
        selectattr('stdout', 'search', 'WARNING') |
        list
      }}

- name: Update disconnect results for summary reporting
  ansible.builtin.set_fact:
    disconnect_results:
      results: "{{ powercli_disconnect_results.results | default([]) }}"
      successful_count: "{{ successful_disconnects | length }}"
      failed_count: "{{ failed_disconnects | length }}"
      warning_count: "{{ warning_disconnects | length }}"
  when: powercli_disconnect_results is defined