---
# Correct disconnect_cd_devices.yml using proper vmware_guest cdrom parameter

- name: Initialize disconnect variables
  ansible.builtin.set_fact:
    vms_eligible_for_disconnect: []
    successful_disconnects: []
    failed_disconnects: []

- name: Filter VMs for disconnect operations
  ansible.builtin.set_fact:
    vms_eligible_for_disconnect: >-
      {{
        vms_with_cd_media |
        rejectattr('vm_name', 'in', vm_blacklist) |
        selectattr('cd_devices', 'defined') |
        list
      }}

- name: Display dry-run information
  ansible.builtin.debug:
    msg: |
      ===================================================
      DRY RUN MODE - NO CHANGES WILL BE MADE
      ===================================================
      VMs that would be processed: {{ vms_eligible_for_disconnect | length }}
      Force disconnect enabled: {{ force_disconnect | default(true) }}
      
      CD devices that would be disconnected:
      {% for vm in vms_eligible_for_disconnect %}
      VM: {{ vm.vm_name }}
      {% for cd in vm.cd_devices %}
      - Device: {{ cd.device_label }} (Key: {{ cd.device_key }})
        Media: {{ cd.media_path }}
        Controller: {{ cd.controller_type }}
        Original Controller/Unit: {{ cd.controller_number }}/{{ cd.unit_number }}
        Will use: Controller {{ 0 if cd.controller_type == 'IDE' else 0 }}, Unit {{ 0 if cd.controller_type == 'IDE' else 0 }}
      {% endfor %}
      {% endfor %}
      ===================================================
  when: dry_run | bool

# Disconnect CD devices by setting type to 'none'
- name: Disconnect CD devices using vmware_guest cdrom parameter
  community.vmware.vmware_guest:
    hostname: "{{ inventory_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: false
    uuid: "{{ item.0.uuid }}"
    force: "{{ force_disconnect | default(true) }}"
    state: present
    cdrom:
      - controller_type: "{{ 'ide' if item.1.controller_type == 'IDE' else 'sata' }}"
        controller_number: "{{ 0 if item.1.controller_type == 'IDE' else 0 }}"
        unit_number: "{{ 0 if item.1.controller_type == 'IDE' else 0 }}"
        type: none
        state: present
  with_subelements:
    - "{{ vms_eligible_for_disconnect }}"
    - cd_devices
  loop_control:
    label: "{{ item.0.vm_name }} - {{ item.1.device_label }}"
  delegate_to: localhost
  when: 
    - not (dry_run | bool)
  register: disconnect_results
  failed_when: false
  retries: 3
  delay: 5

- name: Categorize disconnect results
  ansible.builtin.set_fact:
    successful_disconnects: >-
      {{
        disconnect_results.results | default([]) |
        selectattr('changed', 'equalto', true) |
        list
      }}
    failed_disconnects: >-
      {{
        disconnect_results.results | default([]) |
        selectattr('failed', 'defined') |
        selectattr('failed', 'equalto', true) |
        list
      }}
  when: 
    - not (dry_run | bool)
    - disconnect_results is defined

- name: Report successful disconnections
  ansible.builtin.debug:
    msg: |
      ===================================================
      SUCCESSFUL DISCONNECTION:
      ===================================================
      VM: {{ item.item.0.vm_name }}
      Device: {{ item.item.1.device_label }}
      Original Device Key: {{ item.item.1.device_key }}
      Media: {{ item.item.1.media_path }}
      Controller Type: {{ item.item.1.controller_type }}
      Result: CD media disconnected (type set to 'none')
      Force Used: {{ force_disconnect | default(true) }}
      ===================================================
  loop: "{{ successful_disconnects | default([]) }}"
  when: 
    - not (dry_run | bool)
    - successful_disconnects | length > 0

- name: Report failed disconnections
  ansible.builtin.debug:
    msg: |
      ===================================================
      DISCONNECTION FAILED:
      ===================================================
      VM: {{ item.item.0.vm_name }}
      Device: {{ item.item.1.device_label }}
      Original Device Key: {{ item.item.1.device_key }}
      Media: {{ item.item.1.media_path }}
      Controller Type: {{ item.item.1.controller_type }}
      Error: {{ item.msg | default('Unknown error') }}
      
      This may require manual intervention via vSphere Client.
      ===================================================
  loop: "{{ failed_disconnects | default([]) }}"
  when: 
    - not (dry_run | bool)
    - failed_disconnects | length > 0