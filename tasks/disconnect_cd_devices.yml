---
# Final solution: Disconnect CD devices by removing all CD/DVD drives

- name: Initialize disconnect variables
  ansible.builtin.set_fact:
    vms_eligible_for_disconnect: []
    successful_disconnects: []
    failed_disconnects: []

- name: Filter VMs for disconnect operations
  ansible.builtin.set_fact:
    vms_eligible_for_disconnect: >-
      {{
        vms_with_cd_media |
        rejectattr('vm_name', 'in', vm_blacklist) |
        selectattr('cd_devices', 'defined') |
        list
      }}

- name: Display dry-run information
  ansible.builtin.debug:
    msg: |
      ===================================================
      DRY RUN MODE - NO CHANGES WILL BE MADE
      ===================================================
      VMs that would be processed: {{ vms_eligible_for_disconnect | length }}
      Force disconnect enabled: {{ force_disconnect | default(true) }}
      
      VMs with CD devices that would be processed:
      {% for vm in vms_eligible_for_disconnect %}
      - {{ vm.vm_name }}: {{ vm.cd_devices | length }} CD device(s)
      {% for cd in vm.cd_devices %}
        * {{ cd.device_label }} ({{ cd.media_path }}) - Key: {{ cd.device_key }}
      {% endfor %}
      {% endfor %}
      ===================================================
  when: dry_run | bool

# Simplified approach: Remove all CD/DVD drives from VMs that have connected media
- name: Disconnect CD devices by removing all CD/DVD drives
  community.vmware.vmware_guest:
    hostname: "{{ inventory_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: false
    uuid: "{{ item.uuid }}"
    force: "{{ force_disconnect | default(true) }}"
    state: present
    hardware:
      # Set cdrom to empty list to remove all CD/DVD drives
      cdrom: []
  loop: "{{ vms_eligible_for_disconnect }}"
  loop_control:
    label: "{{ item.vm_name }}"
  delegate_to: localhost
  when: 
    - not (dry_run | bool)
  register: disconnect_results
  failed_when: false
  retries: 3
  delay: 5

- name: Categorize disconnect results
  ansible.builtin.set_fact:
    successful_disconnects: >-
      {{
        disconnect_results.results | default([]) |
        selectattr('changed', 'equalto', true) |
        list
      }}
    failed_disconnects: >-
      {{
        disconnect_results.results | default([]) |
        selectattr('failed', 'defined') |
        selectattr('failed', 'equalto', true) |
        list
      }}
  when: 
    - not (dry_run | bool)
    - disconnect_results is defined

- name: Report successful disconnections
  ansible.builtin.debug:
    msg: |
      ===================================================
      SUCCESSFUL CD REMOVAL:
      ===================================================
      VM: {{ item.item.vm_name }}
      UUID: {{ item.item.uuid }}
      CD Devices Removed: {{ item.item.cd_devices | length }}
      Result: All CD/DVD drives removed from VM
      Force Used: {{ force_disconnect | default(true) }}
      ===================================================
  loop: "{{ successful_disconnects | default([]) }}"
  when: 
    - not (dry_run | bool)
    - successful_disconnects | length > 0

- name: Report failed disconnections
  ansible.builtin.debug:
    msg: |
      ===================================================
      CD REMOVAL FAILED:
      ===================================================
      VM: {{ item.item.vm_name }}
      UUID: {{ item.item.uuid }}
      CD Devices: {{ item.item.cd_devices | length }}
      Error: {{ item.msg | default('Unknown error') }}
      
      Manual intervention required:
      1. Use vSphere Client to edit VM settings
      2. Remove CD/DVD drives manually
      3. Or power off VM and retry
      ===================================================
  loop: "{{ failed_disconnects | default([]) }}"
  when: 
    - not (dry_run | bool)
    - failed_disconnects | length > 0